{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4eba\u751f\u5982\u9006\u65c5, \u6211\u4ea6\u662f\u884c\u4eba","text":"\u8fd9\u91cc\u662f Zicx \u7684\u7b14\u8bb0\u672c  Statistics <p>Pages\uff1a64  Words\uff1a10135 </p> <p></p> Contact Me <ul> <li> <p>: https://zicx.top/home</p> </li> <li> <p>: https://zicx.top</p> </li> <li> <p>: @Xuer04</p> </li> <li> <p>: https://telegram.me/Xuer04</p> </li> <li> <p>: mailto:zjajzcx3566@gmail.com</p> </li> </ul>"},{"location":"diss/","title":"\u6b22\u8fce\u6765\u5230\u8ba8\u8bba\u533a!","text":"<p>Introduction</p> <p>\u7531\u4e8e\u4e00\u76f4\u627e\u4e0d\u5230\u6bd4\u8f83\u597d\u7528\u7684\u8de8\u5e73\u53f0\u7b14\u8bb0\u8f6f\u4ef6\uff0c\u6700\u540e\u8fd8\u662f\u9009\u62e9\u4e86\u7528 Mkdocs \u6765\u642d\u5efa\u5728\u7ebf\u7b14\u8bb0\u672c\u3002\u540c\u65f6\u5e0c\u671b\u53ef\u4ee5\u548c\u66f4\u591a\u4eba\u4e00\u8d77\u5206\u4eab\u77e5\u8bc6\uff01\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u7559\u4e0b\u4f60\u7684\u8db3\u8ff9\u54e6 \ud83d\udc63\ud83d\udc63</p> <p>Friends</p> <p> Isshiki\u4fee's Notebook \u4e00\u8272\u4fee\u563f\u563f </p> <p> \u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4 \u5f88\u602a\u5f88\u5389\u5bb3\u7684\u5149\u5934\u5b66\u957f </p>"},{"location":"update/","title":"\u8fd1\u671f\u66f4\u65b0","text":"<p>\u6700\u8fd1\u66f4\u65b0\u7684\u5185\u5bb9</p> <p>\u76ee\u524d\u6b63\u5728\u8fc1\u79fb\u672c\u5730\u7b14\u8bb0\uff0c\u656c\u8bf7\u671f\u5f85\uff01</p> <p>\u8fd1\u671f\u8981\u505a\u7684\u4e00\u4e9b\u4e8b\u60c5</p> <ul> <li>\u6700\u8fd1\u4e3b\u8981\u5728\u5b66 cs231n \u548c\u590d\u4e60 3DV \u7684\u77e5\u8bc6\uff0cC++ \u76f8\u5173\u7684\u5185\u5bb9\u4f1a\u5495\u4e00\u6bb5\u65f6\u95f4</li> <li>cs231n \u7684\u5b66\u4e60\u5185\u5bb9\u5728\u8fd9\u4e2a\u4ed3\u5e93\uff0c\u8fd1\u671f\u4f1a\u4e00\u76f4\u66f4\u65b0</li> <li>\u6574\u7406 cs106L \u7684\u672c\u5730\u7b14\u8bb0</li> <li>\u9605\u8bfb\u300aEffective modern C++\u300b</li> </ul>"},{"location":"course/","title":"\u8bfe\u7a0b\u7b14\u8bb0","text":"<p>Info</p> <p>\u8fd9\u91cc\u662f\u8bfe\u7a0b\u7b14\u8bb0\uff0c\u4e3b\u8981\u6db5\u76d6\u4e86\u8ba1\u7b97\u673a(\u4ee3\u7801\u563f\u563f)\uff0c\u5149\u7535(\u672c\u4e13\u4e1a)\uff0c\u6570\u5b66(\u611f\u89c9\u5b66\u6570\u5b66\u7684\u597d\u5e05) \u7684\u4e00\u4e9b\u8bfe\u7a0b\u3002\u628a\u7b14\u8bb0\u653e\u5728\u8fd9\u91cc\u5206\u4eab\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u5927\u5bb6\u4e00\u8d77\u5b66\u4e60\uff0c\u6709\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u5728\u7b14\u8bb0\u4e0b\u9762\u7684\u8bc4\u8bba\u533a\u6307\u51fa\uff0c Thanks\u266a(\uff65\u03c9\uff65)\uff89</p> Overview <p>\u8bf4\u660e\uff1a\u2705-\u5df2\u5b8c\u5584  \ud83d\udcf6-\u66f4\u65b0\u4e2d  \u274e-\u672a\u4e0a\u4f20 \u8fd9\u4e2a\u8868\u683c\u662f\u53ef\u4ee5\u6392\u5e8f\u7684\u2b07\ufe0f</p> \u8bfe\u7a0b\u540d\u79f0 \u5f00\u8bfe\u5b66\u6821 \u7c7b\u522b \u72b6\u6001 CS106L Stanford CS \ud83d\udcf6 CS231n Stanford CS \u274e DL Systems CMU CS \ud83d\udcf6 \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 ZJU CS \u274e \u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba ZJU CS \ud83d\udcf6 \u6570\u503c\u5206\u6790 ZJU CS \u274e \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b ZJU CS \u274e \u64cd\u4f5c\u7cfb\u7edf ZJU CS \u274e \u5149\u7535\u5b50\u5b66 ZJU OPT \ud83d\udcf6"},{"location":"course/cs/","title":"Computer Science","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u76f8\u5173\u8bfe\u7a0b\u7684\u7b14\u8bb0\u90fd\u653e\u5728\u8fd9\u91cc\uff0c\u60f3\u8ba9\u81ea\u5df1\u770b\u8d77\u6765\u66f4 \"CS\" \u4e00\u70b9</p> <p></p> <p> Sometimes it's the very people who no one imagines anything of who do the things no one can imagine. </p> <p> \u2014\u2014 Alan Turing </p> <p></p>"},{"location":"course/cs/cs106L/","title":"CS106L: Standard C++ Programming","text":"<p>Abstract</p> <ul> <li> Website: Latest version</li> <li> Video: (2019 Fall)</li> <li> Github: Zicx's repo (2022 Winter)</li> </ul>"},{"location":"course/cs/cs106L/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Lec01: \u8bfe\u7a0b\u4ecb\u7ecd</li> <li>Lec02: \u7c7b\u578b\u548c\u7ed3\u6784</li> </ul> <p>\u5728\u5b66\u4e60\u8fd9\u95e8\u8bfe\u7684\u65f6\u5019\u7531\u4e8e\u8d44\u6599\u90fd\u662f\u82f1\u6587\u7684\uff0c\u6240\u4ee5\u7528\u82f1\u6587\u8bb0\u7684\u7b14\u8bb0\uff0c\u5728\u7f51\u7ad9\u4e0a\u6392\u7248\u4f1a\u663e\u5f97\u5f88\u7a00\u758f\uff0c\u4e4b\u540e\u4f1a\u66f4\u65b0\u6210\u4e2d\u6587\u7b14\u8bb0\u7684\uff0c\u6709\u4e9b\u4e0d\u4f1a\u7ffb\u8bd1\u7684\u5730\u65b9\u4f1a\u4fdd\u7559\u539f\u59cb\u63cf\u8ff0\uff0c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u4e0d\u59a5\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u544a\u8bc9\u6211\u54e6 :)</p>"},{"location":"course/cs/cs106L/lec01_intro/","title":"\u8bfe\u7a0b\u4ecb\u7ecd","text":"<p> \u7ea6 288 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"course/cs/cs106L/lec01_intro/#cs106l","title":"\u5173\u4e8e CS106L","text":"<ul> <li>\u91cd\u70b9\u5728\u4e8e\u4ee3\u7801: \u600e\u6837\u8ba9\u4ee3\u7801\u53d8\u5f97\u66f4\u597d\uff0c\u4f18\u96c5\u7684\u4ee3\u7801\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684</li> <li>\u7406\u89e3 C++ \u662f\u600e\u4e48\u4ea7\u751f\u548c\u53d1\u5c55\u7684</li> <li>\u6df1\u5165\u4e86\u89e3 STL</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#c","title":"C++ \u7684\u5386\u53f2","text":""},{"location":"course/cs/cs106L/lec01_intro/#_2","title":"\u6c47\u7f16\u8bed\u8a00","text":""},{"location":"course/cs/cs106L/lec01_intro/#_3","title":"\u4f18\u52bf","text":"<ul> <li>\u7b80\u5355\u7684\u6307\u4ee4\u96c6</li> <li>\u8fd0\u884c\u901f\u5ea6\u5feb(\u5982\u679c\u4ee3\u7801\u5199\u5f97\u597d)</li> <li>\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u4f60\u7684\u7a0b\u5e8f</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#_4","title":"\u4e0d\u8db3","text":"<ul> <li>\u4ee3\u7801\u5199\u7684\u5f88\u5197\u957f(\u5373\u4f7f\u662f\u6267\u884c\u7b80\u5355\u7684\u4efb\u52a1)</li> <li>\u4ee3\u7801\u5f88\u96be\u7406\u89e3</li> <li>\u901a\u7528\u6027\u5f88\u5dee(\u5f88\u96be\u8de8\u5e73\u53f0\u5de5\u4f5c)</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#c_1","title":"C \u8bed\u8a00\u7684\u51fa\u73b0","text":""},{"location":"course/cs/cs106L/lec01_intro/#_5","title":"\u4f18\u52bf","text":"<ul> <li>\u66f4\u5feb</li> <li>\u66f4\u7b80\u5355</li> <li>\u8de8\u5e73\u53f0</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#_6","title":"\u4e0d\u8db3","text":"<ul> <li>\u6ca1\u6709\u5bf9\u8c61\u548c\u7c7b\u578b</li> <li>\u5f88\u96be\u5199\u51fa \"\u901a\u7528\u4ee3\u7801\"</li> <li>\u7f16\u5199\u5927\u578b\u9879\u76ee\u5f88\u5403\u529b</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#c_2","title":"C++ \u7684\u8bbe\u8ba1\u7406\u5ff5","text":"<p>C++ \u6838\u5fc3\u6307\u5357</p> <ul> <li>\u53ea\u6dfb\u52a0\u7528\u4e8e\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u7684\u7279\u6027</li> <li>\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8868\u8fbe\u60f3\u6cd5\u548c\u610f\u56fe</li> <li>\u533a\u5757\u5316(Compartmentalization) \u662f\u5173\u952e</li> <li>\u4e0d\u8981\u6d6a\u8d39\u65f6\u95f4\u6216\u7a7a\u95f4</li> <li>\u5c3d\u53ef\u80fd\u5728\u7f16\u8bd1\u65f6\u4fdd\u8bc1\u5b89\u5168</li> </ul>"},{"location":"course/cs/cs106L/lec01_intro/#stl","title":"\u5173\u4e8e STL","text":"<ul> <li>\u529f\u80fd\u6027\u9f50\u5168, \u5305\u62ec\u5e38\u7528\u7684\u51fd\u6570\u548c\u4e00\u4e9b\u7b97\u6cd5</li> <li>\u5185\u7f6e\u591a\u79cd\u7c7b, \u6bd4\u5982 maps, sets, vectors</li> <li>\u901a\u8fc7 namespace <code>std::</code> \u6765\u4f7f\u7528 STL \u4e2d\u7684\u5185\u5bb9</li> <li>\u529f\u80fd\u5f3a\u5927\u5e76\u4e14\u4e00\u76f4\u5728\u66f4\u65b0\u7ef4\u62a4</li> </ul>"},{"location":"course/cs/cs106L/lec02_types_and_structs/","title":"\u7c7b\u578b\u548c\u7ed3\u6784","text":"<p> \u7ea6 495 \u4e2a\u5b57  62 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#c","title":"C++ \u57fa\u7840\u7c7b\u578b","text":"<pre><code>int val = 5; //32 bits\nchar ch = 'F'; //8 bits (usually)\nfloat decimalVal1 = 5.0; //32 bits (usually)\ndouble decimalVal2 = 5.0; //64 bits (usually)\nbool bVal = true; //1 bit\n</code></pre> <p>\u5b57\u7b26\u4e32\u7c7b\u578b: <pre><code>#include &lt;string&gt; // need `string` library\nstd::string str = \"Sarah\"; // double quotes means string\n// index into a string and get a character\nchar character = str[1]; // 'a'\n</code></pre></p>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#_2","title":"\u52a8\u6001\u7c7b\u578b\u548c\u9759\u6001\u7c7b\u578b","text":"<p>C++ \u662f\u4e00\u79cd\u9759\u6001\u7c7b\u578b\u8bed\u8a00</p> <ul> <li>\u9759\u6001\u7c7b\u578b: \u5177\u6709\u547d\u540d(\u53d8\u91cf\uff0c\u51fd\u6570\u7b49)\u7684\u5185\u5bb9\u5728\u8fd0\u884c\u65f6\u4e4b\u524d\u90fd\u5177\u6709\u660e\u786e\u7c7b\u578b (C++)</li> <li>\u52a8\u6001\u7c7b\u578b: \u5177\u6709\u547d\u540d(\u53d8\u91cf\uff0c\u51fd\u6570\u7b49)\u7684\u5185\u5bb9\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5f53\u524d\u503c\u88ab\u6307\u5b9a\u4e00\u4e2a\u7c7b\u578b (Python)</li> <li>\u8fd0\u884c\u65f6: \u4ece\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u5230\u7ec8\u6b62\u7684\u65f6\u671f (\u5982\u679c\u662f\u9700\u8981\u7f16\u8bd1\u7684\u8bed\u8a00, \u5219\u5728\u7f16\u8bd1\u671f\u4e4b\u540e)</li> </ul> <pre><code># CRASH during runtime, can\u2019t divide a string\ndef div_3(x):\nreturn x / 3\ndiv_3(\"hello\")\n</code></pre> <pre><code>// Compile error: this code will never run\nint div_3(int x){\nreturn x / 3;\n}\ndiv_3(\"hello\");\n</code></pre> <p>\u9759\u6001\u7c7b\u578b\u6709\u52a9\u4e8e\u6211\u4eec\u5728\u4ee3\u7801\u8fd0\u884c\u4e4b\u524d\u53d1\u73b0\u548c\u89e3\u51b3\u9519\u8bef\u3002</p>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#_3","title":"\u91cd\u8f7d","text":"<p>\u5b9a\u4e49\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u7c7b\u578b\u7684\u5185\u5bb9(\u8fd0\u7b97\u7b26, \u51fd\u6570\u7b49), \u4e4b\u540e\u7684\u8bfe\u7a0b\u4f1a\u91cd\u70b9\u8bb2\u89e3</p> <pre><code>int half(int x) {\nstd::cout &lt;&lt; \u201c1\u201d &lt;&lt; endl;\nreturn x / 2;\n}\ndouble half(double x) {\ncout &lt;&lt; \u201c2\u201d &lt;&lt; endl;\nreturn x / 2;\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#struct","title":"Struct","text":"<p><code>struct</code>: \u4e00\u79cd\u7531\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u53ef\u7528\u6570\u636e\u7c7b\u578b\uff0c\u5141\u8bb8\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u9879\uff0c\u662f\u4e00\u79cd\u5c06\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u65b9\u5f0f</p> <pre><code>struct Student {\nstring name; // these are called fields\nstring state; // separate these by semicolons\nint age;\n};\nStudent s; // don't have to add `struct` key word\ns.name = \"Sarah\";\ns.state = \"CA\";\ns.age = 21; // use . to access fields\n// is the same as ...\nStudent s = {\"Sarah\", \"CA\", 21};\n// structured binding -- c++17 feature\nauto [name, state, age] = s;\n</code></pre>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#pair","title":"Pair","text":"<p><code>std::pair</code>: STL \u5185\u7f6e\u7684\u4e00\u79cd <code>struct</code>\uff0c\u7531\u4e24\u4e2a fields \u7ec4\u6210\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b</p> <pre><code>// The fields in std::pairs are named `first` and `second`\n// initialize\nstd::pair&lt;int, string&gt; numSuffix{1, \"st\"};\nstd::cout &lt;&lt; numSuffix.first &lt;&lt; numSuffix.second &lt;&lt; std::endl;\n// is same as ...\nstd::pair&lt;int, string&gt; numSuffix = std::make_pair(1, \"st\");\n// also same as ...\nstd::pair&lt;int, string&gt; numSuffix = {1, \"st\"};\n</code></pre> <p>\u4e3a\u4e86\u907f\u514d\u6307\u5b9a <code>pair</code> \u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570 <code>std::make_pair(field1, field2)</code></p> <pre><code>std::string suffix;\nint num;\nstd::tie(num, suffix) = std::make_pair(1, \"st\");\nstd::cout &lt;&lt; num &lt;&lt; \" \" &lt;&lt; suffix &lt;&lt; std::endl;\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u4e2a\u51fd\u6570 <code>std::tie(arg1, arg2)</code> \u6765\u63a5\u6536\u4e00\u4e2a <code>pair</code>\uff0c\u5728 c++17 \u4e2d\uff0c\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u7279\u6027\u53eb\u7ed3\u6784\u5316\u7ed1\u5b9a(Structured Bindings)\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u4ee3\u7801</p> <pre><code>// more efficient way in c++17\nauto [a, b] = std::make_pair(3.4, 5);\n</code></pre>"},{"location":"course/cs/cs106L/lec02_types_and_structs/#auto","title":"Auto","text":"<p><code>auto</code>: C++ \u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u505a\u7c7b\u578b\u81ea\u52a8\u63a8\u5bfc\uff0c\u4e3b\u8981\u7528\u4e8e\u4e24\u79cd\u60c5\u51b5</p> <ul> <li>\u58f0\u660e\u53d8\u91cf\u65f6\u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u65ad\u8be5\u53d8\u91cf\u7684\u7c7b\u578b</li> <li>\u58f0\u660e\u51fd\u6570\u65f6\u51fd\u6570\u8fd4\u56de\u503c\u7684\u5360\u4f4d\u7b26</li> </ul> <p>\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528 auto?</p> <ul> <li>\u4f60\u4e0d\u9700\u8981\u5728\u610f\u662f\u4ec0\u4e48\u7c7b\u578b (iterators)</li> <li>\u5b83\u7684\u7c7b\u578b\u5728\u4e0a\u4e0b\u6587\u4e2d\u5f88\u660e\u786e (templates)</li> <li>\u4f60\u4e0d\u77e5\u9053\u5177\u4f53\u662f\u4ec0\u4e48\u7c7b\u578b (lambdas)</li> <li>\u4e0d\u8981\u5c06\u5b83\u7528\u4e8e\u8fd4\u56de\u7c7b\u578b\uff0c\u8fd9\u4f1a\u8ba9\u4eba\u5f88\u8ff7\u60d1\uff0c\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u4e00\u6837     <pre><code>auto spliceString(const string&amp; s);\n</code></pre></li> </ul> <p>\u4f7f\u7528 auto \u5e76\u4e0d\u610f\u5473\u7740\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b\uff0c\u8be5\u53d8\u91cf\u7684\u7c7b\u578b\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u5bfc\u7684</p>"},{"location":"course/cs/cs106L/lec03_streams/","title":"\u6d41\u548c\u6d41\u5bf9\u8c61","text":"<p> \u7ea6 636 \u4e2a\u5b57  64 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"course/cs/cs106L/lec03_streams/#_2","title":"\u6d41","text":"<p>Convert between string-represented data and the real thing.</p> <p></p> <p><code>stream</code>: an abstraction for input/output. Streams convert between data and the string representation of data.</p>"},{"location":"course/cs/cs106L/lec03_streams/#_3","title":"\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u6d41","text":"<ul> <li><code>cin</code>: Standard input stream(buffered)</li> <li><code>cout</code>: Standard output stream(buffered)</li> <li><code>cerr</code>: Standard error stream(unbuffered)</li> <li><code>clog</code>: Standard error stream(buffered)</li> </ul>"},{"location":"course/cs/cs106L/lec03_streams/#_4","title":"\u8f93\u51fa\u6d41","text":"<p><code>std::out</code> is an output stream. It has type <code>std::ostream</code>.</p> <ul> <li>Can only send data using the <code>&lt;&lt;</code> operator.</li> <li>Converts data of any type into string and sends it to the stream.</li> <li>std::cout is the output stream that goes to the console.</li> </ul> <p>Example</p> <pre><code>std::cout &lt;&lt; 5 &lt;&lt; std::endl;\n// converts int value 5 to string \"5\"\n// send \"5\" to the console output stream\n</code></pre>"},{"location":"course/cs/cs106L/lec03_streams/#_5","title":"\u8f93\u5165\u6d41","text":"<p><code>std::cin</code> is an input stream. It has type <code>std::istream</code>.</p> <ul> <li>Can only send data using the <code>&gt;&gt;</code> operator.</li> <li>Receives a string from the stream and converts it to data.</li> <li>std::cin is the input stream that gets input from the console.</li> <li>The result of <code>cin &gt;&gt;</code> expression is <code>bool</code>, we can use if (cin &gt;&gt; ...) to check input.</li> </ul> <p>Example</p> <pre><code>int x;\nstring str;\nstd::cin &gt;&gt; x &gt;&gt; str;\n//reads exactly one int then one string from console\n</code></pre> <p>\u5173\u4e8e std::in</p> <ul> <li>Each <code>&gt;&gt;</code> only reads until the next whitespace(tab, space, newline).</li> <li>Everything after the \ufb01rst whitespace gets saved(saved in buffer) and used the next time <code>std::cin &gt;&gt;</code> is called.</li> <li>Once an error is detected, the input stream's fail bit is set, and it will no longer accept input.</li> <li>Types matter<ul> <li>Stream stops reading at any whitespace or any invalid character for the type.</li> </ul> </li> </ul> <p>Question</p> <p>Why &gt;&gt; with cin is a nightmare?</p> <ul> <li>cin reads the entire line into the buffer but extracts whitespace-separated tokens.</li> <li>Trash in the buffer will make cin not prompt the user for input at the right time.</li> <li>When cin fails, all future cin calls fail too.</li> </ul> <p>Think of a std::istream as a sequence of characters.</p> <p>Example</p> <pre><code>int age; double hourlyWage;\ncout &lt;&lt; \"Please enter your age: \";\ncin &gt;&gt; age;\ncout &lt;&lt; \"Please enter your hourly wage: \";\ncin &gt;&gt; hourlyWage;\n//what happens if first input is 2.17?\ncout &lt;&lt; \"\\nage: \" &lt;&lt; age &lt;&lt; endl;\ncout &lt;&lt; \"hourlyWage : \" &lt;&lt; hourlyWage &lt;&lt; endl;\n// age: 2\n// hourlyWage: 0.17\n</code></pre> <p>When we first input 2.17, the <code>2</code> is read and put into variable <code>age</code>, but the std::istream is still reading(not meet whitespace), and save <code>.17</code> in buffer, when the second <code>std::cin &gt;&gt;</code> called, write <code>.17</code> into variable <code>hourlyWage</code>.</p>"},{"location":"course/cs/cs106L/lec03_streams/#_6","title":"\u72b6\u6001\u4f4d","text":"<p>We can use state bits to check if the stream has errors.</p> <ul> <li><code>Good bit</code>: ready for read/write</li> <li><code>Fail bit</code>: previous operation failed, all future operations frozen<ul> <li>type mismatch</li> <li>file can't be opened</li> <li>seekg failed</li> </ul> </li> <li><code>EOF bit</code>: previous operation reached the end of buffer content</li> <li><code>Bad bit</code>: external error, likely irrecoverable</li> </ul> <p>Example</p> <pre><code>std::istringstream iss(str);\ncout &lt;&lt; iss.good() &lt;&lt; endl;\ncout &lt;&lt; iss.fail() &lt;&lt; endl;\ncout &lt;&lt; iss.eof() &lt;&lt; endl;\ncout &lt;&lt; iss.bad() &lt;&lt; endl;\n</code></pre>"},{"location":"course/cs/cs106L/lec03_streams/#stdgetline","title":"std::getline()","text":"<ul> <li>Defined in header\u00a0<code>&lt;string&gt;</code></li> <li>Used to read a string or a line from an input stream.</li> <li>Signature: <code>istream&amp; getline(istream&amp; is, string&amp; str, char delim);</code><ul> <li>is: Stream to read from</li> <li>str: Place where input from stream is stored</li> <li>delim: When to stop reading (<code>\\n</code> as default)</li> </ul> </li> <li>How it works<ul> <li>Clears contents in str</li> <li>Extracts chars from is and stores them in str until:<ul> <li>End of \ufb01le buffer of is, sets EOF bit (can be checked using <code>is.eof()</code>)</li> <li>Next char in is is delim(default is \\n), extracts but does not store delim</li> <li>str max size is reached, sets FAIL bit (can be checked using <code>is.fail()</code>)</li> </ul> </li> </ul> </li> </ul> <p>Hint</p> <p>Notice getline(istream&amp; stream, string&amp; line) takes in both parameters by reference!</p> <p>How to use std::getline()</p> <p>Example</p> <pre><code>string line;\nstd::getline(cin, line); // now line has changed\nstd::cout &lt;&lt; line &lt;&lt; std::endl;\n</code></pre> <p>Compare <code>&gt;&gt;</code> with <code>geline</code></p> <ul> <li><code>&gt;&gt;</code> reads up to the next whitespace character and does not go past that whitespace character.</li> <li><code>getline</code> reads up to the next delimiter (by default, '\\n'), and does go past that delimiter.</li> </ul>"},{"location":"course/cs/cs106L/lec03_streams/#_7","title":"\u6587\u4ef6\u6d41","text":""},{"location":"course/cs/cs106L/lec03_streams/#_8","title":"\u8f93\u51fa\u6587\u4ef6\u6d41","text":"<ul> <li>Defined in header <code>&lt;fstream&gt;</code></li> <li>Have type <code>std::ofstream</code></li> <li>Can only send data using the <code>&lt;&lt;</code> operator.</li> <li>Converts data of any type into a string and sends it to the \ufb01le stream.</li> <li>Must initialize your own ofstream object linked to your \ufb01le.</li> </ul> <p>Example</p> <pre><code>std::ofstream out_file(\"out.txt\");\n// out_file is now an ofstream that outputs to out.txt\nout_file &lt;&lt; 5 &lt;&lt; std::endl; // out.txt now contains 5\n</code></pre>"},{"location":"course/cs/cs106L/lec03_streams/#_9","title":"\u8f93\u5165\u6587\u4ef6\u6d41","text":"<ul> <li>Defined in header <code>&lt;fstream&gt;</code></li> <li>Have type <code>std::ifstream</code>.</li> <li>Only receives strings using the <code>&gt;&gt;</code> operator.</li> <li>Receives strings from a \ufb01le and converts it to data of any type.</li> <li>Must initialize your own ifstream object linked to your \ufb01le.</li> </ul> <p>Example</p> <pre><code>std::ifstream in_file(\"out.txt\");\n// in_file is now an ifstream that reads from out.txt string str;\nstring str;\nin_file &gt;&gt; str; // first word in out.txt goes into str\n</code></pre>"},{"location":"course/cs/cs106L/lec03_streams/#_10","title":"\u6587\u4ef6\u6a21\u5f0f","text":"<ul> <li><code>ios::app</code>: append</li> <li><code>ios::ate</code>: at end</li> <li><code>ios::in</code>: open file for reading</li> <li><code>ios::out</code>: open file for writing</li> <li><code>ios::trunc</code>: truncate, if the file exists, empty the file contents when open the file</li> <li>multi mode<ul> <li>we can use <code>|</code> to combine two modes, like ios::out | ios::ate</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec03_streams/#_11","title":"\u5b57\u7b26\u4e32\u6d41","text":"<ul> <li>\u8f93\u5165\u6d41: <code>std::istringstream</code><ul> <li>Give any data type to the istringstream, it\u2019ll store it as a string. (data type -&gt; string)</li> </ul> </li> <li>\u8f93\u51fa\u6d41: <code>std::ostringstream</code><ul> <li>Make an ostringstream out of a string, read from it word/type by word/type. (string -&gt; data type)</li> </ul> </li> </ul> <p>Example</p> <pre><code>// ostringstream\nstd::ostringstream oss(\"Hello world\");\ncout &lt;&lt; oss.str() &lt;&lt; endl;\n// Hello world\noss &lt;&lt; \"Game over\";\ncout &lt;&lt; oss.str() &lt;&lt; endl;\n// Game overld\n// Q: why?\n// A: The buffer doesn't refresh.\n// istringstream\nStudent reverseJudgementCall(string judgement) {\n// input: \u201cSarah age 21, rocks\u201d\nstd::istringstream converter(judgement);\nstring fluff;\nint age;\nbool lovesCpp;\nstring name;\nconverter &gt;&gt; name; // Sarah\nconverter.ignore() // pass over a character -&gt; age\nconverter &gt;&gt; age; // 21\nconverter &gt;&gt; fluff; // ,\nstring cool;\nconverter &gt;&gt; cool; // rocks\nif (cool == \"rocks\")\nreturn Student{name, age, \"bliss\"};\nelse\nreturn Student{name, age, \"misery\"};\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/","title":"Initialization and References","text":"<p> \u7ea6 365 \u4e2a\u5b57  87 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#initialization","title":"Initialization","text":"<p><code>Initialization</code>: How we provide initial values to variables.</p>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#uniform-initialization","title":"Uniform initialization","text":"<p>Initialization while we declare a variable.</p> <p><code>Uniform initialization</code>: Curly bracket initialization. Available for all types, immediate initialization on declaration!</p> <ul> <li>Use uniform initialization to initialize every \ufb01eld of non-primitive typed variables.</li> </ul> <p>Example</p> <pre><code>Student s{\"Sarah\", \"CA\", 21}; // struct\nstd::pair&lt;int, string&gt; numSuffix{1, \"st\"}; // pair\nstd::vector&lt;int&gt; vec{1, 3, 5}; // vector\nint x{5}; // int\nstring str{\"Name\"}; //string\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#structured-binding","title":"Structured binding","text":"<p>Initialize dierctly from the contens of a struct.</p> <p>Example</p> <pre><code>// pair\nauto p = std::make_pair(\"str\", 5);\nauto [a, b] = p;\n// struct\nStudent s{\"Sarah\", 20, \"TA\"};\nauto [name, age, staff] = s;\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#references","title":"References","text":"<p><code>References</code>: An alias(another name) for a named variable.</p> <ul> <li>We can only create references to variables.</li> <li>The cpp compiler does not allocate separate memory space for references.</li> <li>References must have initialization.</li> </ul> <p>Example</p> <pre><code>void change_x(int&amp; x){\nx = 0; // changes to x will persist\n}\nvoid keep_x(int x){\nx = 0;\n}\nchange_x(a); // a becomes a reference to x\nkeep_x(b); // b becomes a copy of x\ncout &lt;&lt; a &lt;&lt; endl; // 0\ncout &lt;&lt; b &lt;&lt; endl; // 100\nstd::vector&lt;int&gt; original{1, 2};\nstd::vector&lt;int&gt; copy = original;\nstd::vector&lt;int&gt;&amp; ref = original;\n// `=` automatically makes a copy, must use `&amp;` to avoid this\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#l-values-and-r-values","title":"L-values and R-values","text":""},{"location":"course/cs/cs106L/lec04_init_and_ref/#l-values","title":"L-values","text":"<ul> <li>L-values can appear on the left or right of an <code>=</code></li> <li>L-values have names</li> <li>L-values are not temporary</li> <li>L-values live until the end of the scope</li> </ul>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#r-values","title":"R-values","text":"<ul> <li>R-values can only appear on the right of an <code>=</code></li> <li>R-values don't have names</li> <li>R-values are temporary</li> <li>R-values live until the end of the line</li> </ul>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#const","title":"Const","text":"<p><code>const</code>: keyword indicating a variable, function or parameter can't be modi\ufb01ed.</p> <p>Example</p> <pre><code>std::vector&lt;int&gt; vec{1, 2, 3};\nconst std::vector&lt;int&gt; c_vec{7, 8}; // a const variable\nstd::vector&lt;int&gt;&amp; ref = vec; // a regular reference\nconst std::vector&lt;int&gt;&amp; c_ref = vec; // a const reference\nvec.push_back(3); // OK\nc_vec.push_back(3); // BAD - const\nref.push_back(3); // OK\nc_ref.push_back(3); // BAD - const\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#const-references","title":"Const References","text":"<p>Can't declare non-const reference to const variable.</p> <p>Example</p> <pre><code>const std::vector&lt;int&gt; c_vec{7, 8}; // a const variable\nstd::vector&lt;int&gt;&amp; bad_ref = c_vec; // BAD\nconst std::vector&lt;int&gt;&amp; good_ref = c_vec; // Fixed\n</code></pre> <p>When do we use references/const references?</p> <ul> <li>If we\u2019re working with a variable that takes up little space in memory (e.g. int, double), we don\u2019t need to use a reference and can just copy the variable.</li> <li>If we need to alias the variable to modify it(e.g. in a function), we can use references.</li> <li>If we don\u2019t need to modify the variable, but it\u2019s a big variable (e.g. std::vector), we can use const references.</li> </ul> <p>We can return references as well, but note that the parameter must be a non-const reference to return.</p> <p>Example</p> <pre><code>int&amp; front(std::vector&lt;int&gt; &amp; vec){\nreturn vec[0];\n}\nint main(void){\nstd::vector&lt;int&gt; nums{1, 2, 3};\nfront(nums) = 4; // vec = {4, 2, 3}\nreturn 0;\n}\n</code></pre> <p>R-values can be bound to const reference.</p> <p>Example</p> <pre><code>int foo(const int &amp;a){\nreturn a + 3;\n}\nint main(void){\nfoo(1 + 2); // `1+2` is a r-value, but can be passed in\n// as const reference.\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#const-pointers","title":"Const pointers","text":"<p>Const pointer means this pointer is unchangeable, but what the pointer points to is changeable.</p> <p>Example</p> <pre><code>using iterator = std::string*;\nusing const_iterator = const std::string*;\n// string * const, const ptr to non-const obj\nconst iterator it_c = str.begin();\n// ok! it_c is a const pointer to non-const object\n*it_c = \"hi\" ;\n//not ok! can\u2019t change where a const pointer points\nit_c++;\n// const string*, a non-const ptr to const obj\nconst_iterator c_it = str.begin();\n// totally ok! the pointer itself is non-const\nc_it++;\n// not ok! can\u2019t change underlying const object\n*c_it = \"hi\";\n// allowed! can always read a const object, just can't change\ncout &lt;&lt; *c_it &lt;&lt; endl;\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#const-functions","title":"Const functions","text":"<p><code>const-interface:</code> All member functions marked const in a class de\ufb01nition. Objects of type const ClassName may only use the const-interface.</p> <p>Warning</p> <p>Can't call a non-const function in a const function.</p> <p>Every member function of a class that doesn't change its member variables should be marked const.</p> <p>Example</p> <pre><code>class Str {\npublic:\nsize_t size() const;\nbool empty() const;\nconst std::string&amp; at(size_t index) const;\n...\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec04_init_and_ref/#parameter-passing-rules","title":"Parameter passing rules","text":"<p>Basic parameter passing rules</p> <p>Advanced parameter passing rules</p>"},{"location":"course/cs/cs106L/lec05_containers/","title":"\u5bb9\u5668","text":"<p> \u7ea6 461 \u4e2a\u5b57  41 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>\u5bb9\u5668: An object that allows us to collect other objects together and interact with them in some way.</p> <ul> <li>Organization: Related data can be packaged together.</li> <li>Standardization: Common features are expected and implemented.</li> <li>Abstraction: Complex ideas made easier to utilize by clients.</li> </ul>"},{"location":"course/cs/cs106L/lec05_containers/#stl","title":"STL \u4e2d\u7684\u5bb9\u5668","text":"<ul> <li>\u5e38\u89c1\u7684: vector, stack, queue, set, map</li> <li>\u4e0d\u5e38\u89c1\u7684:<ul> <li><code>array</code> : An array is the primitive form of a vector, fixed size in a strict sequence.</li> <li><code>deque</code> : A deque is a double ended queue.</li> <li>list: A list is a doubly linked list, can loop through in either direction.</li> </ul> </li> </ul> <p>\u4e24\u79cd\u7c7b\u578b\u7684\u5bb9\u5668</p> <ul> <li>Sequence:<ul> <li>Containers that can be accessed sequentially.</li> <li>Provides access to sequences of elements.</li> <li>Anything with an inherent order goes here.</li> <li>vectors, deques, lists ...</li> </ul> </li> <li>Associative<ul> <li>Containers that don\u2019t necessarily have a sequential order.</li> <li>More easily searched, like maps and sets.</li> <li>maps, sets, unordered maps/sets ...</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec05_containers/#vector","title":"Vector","text":"<p>At a high level, a vector is an ordered collection of elements of the any same type that can grow and shrink in size.</p> <p>We keep track of a few member variables</p> <ul> <li><code>size</code>: number of elements in the vector</li> <li><code>capacity</code>: space allocated for elements</li> </ul> <pre><code>// initialization of vector\nstd::vector&lt;int&gt; vec1{3, 5}; // {3, 5}\nstd::vector&lt;int&gt; vec2(3, 5); // {5, 5, 5}\n// add element\nvec1.push_back(4); // {3, 5, 4}\n// get element\nint a = vec1.at(0); // a = 3\nint b = vec1[1]; // b = 5\n</code></pre>"},{"location":"course/cs/cs106L/lec05_containers/#deque","title":"Deque","text":"<p>A deque is a double ended queue, can do everything a vector can do, unlike vector, it is possible and fast to <code>push_front</code> and <code>pop_front</code>.</p> <pre><code>std::deque&lt;int&gt; dq;\n// add element\ndq.push_front(2); // {2}\ndq.push_front(4); // {4, 2}\ndq.push_back(3); // {4, 2, 3}\n// delete element\ndq.pop_front() // {2, 3}\ndq.pop_back() // {2}\n</code></pre> <p>Quote</p> <p>Which to use?</p> <p><code>vector</code> is the type of sequence that should be used by default, <code>deque</code> is the data structure of choice when most insertions and deletions take place at the beginning or at the end of the sequence.</p> <p><p>\u2014\u2014 C++ ISO Standard</p></p> <p>Choosing sequence containers</p> <p></p>"},{"location":"course/cs/cs106L/lec05_containers/#map","title":"Map","text":"<p>Maps are implemented with key-value pairs with unique keys, <code>std::pair&lt;const key, value&gt;</code></p> <p>Based on ordering property of keys, keys need to be comparable using <code>&lt;</code> operator.</p> <ul> <li>Ordered maps/sets require a comparison operator to be de\ufb01ned, keys in sorted order.</li> <li>Unordered maps/sets require a hash function to be de\ufb01ned, keys are unordered.</li> </ul> <p>Example</p> <pre><code>std::map&lt;int, string&gt; mymap;\nstring str = mymap.at(key); // throw error if the key  not exists.\nstr = mymap[key]; // will not throw error if the key not exists.\n</code></pre>"},{"location":"course/cs/cs106L/lec05_containers/#multimap","title":"Multimap","text":"<p>Multimap is an associative container that contains a sorted list of key-value pairs, while permitting multiple entries with the same key.</p> <p>Example</p> <pre><code>std::multimap&lt;int, int&gt; myMMap;\nmyMMap.insert({std::make_pair(3, 3)});\nmyMMap.insert({3, 12});\ncout &lt;&lt; myMMap.count(3) &lt;&lt; endl; // 2\n</code></pre>"},{"location":"course/cs/cs106L/lec05_containers/#set","title":"Set","text":"<p>Sets contains a sorted set of unique objects of type\u00a0<code>Key</code>.</p> <p>Example</p> <pre><code>std::set&lt;string&gt; myset;\n// add element\nmyset.insert(\"game\"); // {\"game\"}\nmyset.insert(\"milk\"); // {\"game\", \"milk\"}\n// check if contains element\nbool game_exist = myset.count(\"game\"); // true\nbool hello_exist = myset.count(\"hello\"); // false\n// remove element\nmyset.earse(\"milk\"); // {\"game\"}\n</code></pre>"},{"location":"course/cs/cs106L/lec05_containers/#container-adaptors","title":"Container Adaptors","text":"<p>Container adaptors are \"wrappers\" to existing containers</p> <p><code>Wrappers</code> modify the interface to sequence containers and change what the client is allowed to do/how they can interact with the container.</p> <ul> <li>Commonly used data structures made easy for the client to use.</li> <li>Can use different backing containers based on use type.</li> <li>Container adaptors wrap existing containers to permit new/restrict access to the interface for the clients.</li> </ul>"},{"location":"course/cs/cs106L/lec05_containers/#stack","title":"Stack","text":"<p>Stack just limits the functionality of a vector/deque to only allow <code>push_back</code> and <code>pop_back</code>.</p>"},{"location":"course/cs/cs106L/lec05_containers/#queue","title":"Queue","text":"<p>Queue just limits the functionality of a deque to only allow <code>push_back</code>  and <code>pop_front</code>.</p>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/","title":"TOC","text":"<ul> <li>[[#Iterators|Iterators]]<ul> <li>[[#Iterators#What is iterator|What is iterator]]</li> <li>[[#Iterators#Types of iterator|Types of iterator]]</li> <li>[[#Iterators#Ranges|Ranges]]</li> <li>[[#Iterators#Range based for loop|Range based for loop]]</li> </ul> </li> <li>[[#Pointers|Pointers]]<ul> <li>[[#Pointers#What is pointer|What is pointer]]</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#iterators","title":"Iterators","text":""},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#what-is-iterator","title":"What is iterator","text":"<p>Iterator is a abstraction for a tool that accesses the next or previous element or random access.</p> <p>How do we access elements in a container in order? Containers all implement something called an iterator to do this. - Iterators let you access all data in containers programmatically. - Iterators allow iteration over any container, whether it is ordered or not. - An iterator has a certain order, it \"knows\" what element will come next. - Each container has its own iterator, which can have different behavior. - All iterators implement a few shared operations:     - Initializing -&gt; <code>iter = s.begin();</code> begin() and end() return iterators.     - Incrementing -&gt; <code>iter++;</code>     - Dereferencing -&gt; <code>a = \\*iter;</code>     - Comparing -&gt; <code>iter != s.end();</code>     - Copying -&gt; <code>new_iter = iter;</code></p> <p>Similarities - Can be created from existing iterator. - Can be advanced using <code>++</code> - Can be compared with <code>==</code> and <code>!=</code></p> <pre><code>```cpp\nstd::set&lt;int&gt; myset{1, 2, 3, 4};\n\n// define a iterator like this: \n// container_class_name::iterator\u00a0iterator_name;\nstd::set&lt;int&gt;::iterator iter = myset.begin();\ncout &lt;&lt; *iter &lt;&lt; endl; // 1\n\n++iter;\ncout &lt;&lt; *iter &lt;&lt; endl; // 2\n\nif (iter == myset.end()){\n    return;\n}\n\n// find returns an iterator\nstd::vector&lt;int&gt; vec{3, 1, 4, 8, 5, 9, 2, 6, 7, 0};\nconst int elem2find = 5;\n\nauto find_it = std::find(vec.begin(), vec.end(), elem2find);\ncout &lt;&lt; *find_it &lt;&lt; endl; // 5\n\n// map iterator\nstd::map&lt;int, int&gt; mmap;\nfor(auto iter = mmap.begin(); iter != mmap.end(); ++iter){\n    cout &lt;&lt; (*iter).first &lt;&lt; \" \" &lt;&lt; (*iter).second &lt;&lt; endl;\n    // is the same as ...\n    cout &lt;&lt; iter-&gt;first &lt;&lt; \" \" &lt;&lt; iter-&gt;second &lt;&lt; endl;\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#types-of-iterator","title":"Types of iterator","text":"<ul> <li><code>Input and output iterators</code>: They can perform sequential single-pass input or output operations.</li> <li><code>Forward iterators</code>: They have all the functionality of input iterators and if they are not constant iterators also have the functionality of output iterators.</li> <li><code>Bidrectional iterators</code>: They are like forward iterators but can also be iterated through backwards.</li> <li><code>Random-access iterators</code>: They implement all the functionality of bidirectional iterators, and also have the ability to access ranges non-sequentially.</li> </ul> <ul> <li>Forward iterators are the minimum level of functionality for standard containers.<ul> <li>Input iterators can appear on the RHS (right hand side) of an <code>=</code> operator, like <code>auto elem = *it;</code></li> <li>Output iterators can appear on the LHS (left hand side) of an <code>=</code> operator, like <code>*elem = value;</code></li> </ul> </li> <li>Bidirectional iterators can go forward as well as backward.<ul> <li><code>++it;</code></li> <li><code>--it;</code></li> </ul> </li> <li>Random-access iterators allow you to directly access values without visiting all elements sequentially.<ul> <li><code>it += 5;</code> </li> </ul> </li> </ul> <p>Collected by xyx: </p> <pre><code>```cpp\nfor (auto iter = set.begin(); iter != set.end(); ++iter){\n    do something;\n}\n\n// dereference the iterator to get element\nconst auto&amp; elem = *iter;\n</code></pre>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#ranges","title":"Ranges","text":"<p>We can iterate through different ranges.</p> <p></p>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#range-based-for-loop","title":"Range based for loop","text":"<p>A range based <code>for</code> loop is a shorthand for iterator code. All that is required is that the class contains the member functions <code>begin()</code> and <code>end()</code> and that its **return value type supports the operators <code>++,</code> <code>*</code> and <code>!=</code> **</p> <pre><code>```cpp\n// for(type variable : container)\nstd::map&lt;string, int&gt; mmap;\nfor(auto thing : mmap){\n    dosomething(thing.first, thing.second)\n}\n\n// the implementation\nfor (it = mmap.begin(); it != mmap.end(); ++it){\n    thing = *it;\n    dosomething(thing.first, thing.second)\n}\n\n// for structure container (cpp17 extension)\nfor(auto [key, value] : mmap){\n    dosomething(key, value);\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#pointers","title":"Pointers","text":""},{"location":"course/cs/cs106L/lec06_iterators_and_pointers/#what-is-pointer","title":"What is pointer","text":"<p>Variables created in code take up space on the computer. They live in memory at speci\ufb01c addresses. Pointers reference those memory addresses and not the object themselves.</p> <p>Pointer can access memory addresses with &amp; and the data at an address/pointer using *.</p> <pre><code>```cpp\nint val = 18;\nint* ptr = &amp;val;\n\n// dereference\ncout &lt;&lt; *ptr &lt;&lt; endl; // 18\n\n// dereference of member variables\nstruct Student{\n    int id;\n    string name;\n};\n\nStudent s1{12, \"Alice\"};\nStudent* ptr = &amp;s1;\ncout &lt;&lt; ptr-&gt;id &lt;&lt; endl; // 12\n\nstd::pair&lt;int, string&gt; game{2, \"Death Loop\"};\nstd::pair&lt;int, string&gt;* pgame = &amp;game;\ncout &lt;&lt; pgame-&gt;first &lt;&lt; endl; // 2\ncout &lt;&lt; pgame-&gt;second &lt;&lt; endl; // Death Loop\n</code></pre>"},{"location":"course/cs/cs106L/lec07_classes/","title":"TOC","text":"<ul> <li>[[#Classes|Classes]]<ul> <li>[[#Classes#Namespaces|Namespaces]]</li> <li>[[#Classes#This keyword|This keyword]]</li> <li>[[#Classes#Constructors|Constructors]]</li> <li>[[#Classes#Array|Array]]</li> <li>[[#Classes#Destructors|Destructors]]</li> <li>[[#Classes#Static member|Static member]]</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec07_classes/#classes","title":"Classes","text":"<p><code>Class</code>: A programmerde\ufb01ned custom type. An abstraction of an object or data type. - An Object is an instance of a Class. - When a class is de\ufb01ned, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated. - Classes provide their users with a public interface and separate this from a private implementation.</p> <pre><code>```cpp\nclass Student {\n    public:\n        std::string getName();\n        void setName(std::string name);\n        int getAge();\n        void setAge(int age);\n\n    private:\n        std::string name;\n        std::string state;\n        int age;\n};\n</code></pre> <p>Public section: - Users of the specific object can directly access anything here. - De\ufb01nes interface for interacting with the private member variables.</p> <p>Private section: - Usually contains all member variables. - Users can't access or modify anything in the private section.</p>"},{"location":"course/cs/cs106L/lec07_classes/#namespaces","title":"Namespaces","text":"<ul> <li>Put code into logical groups, to avoid name clashes.</li> <li>Each class has its own namespace.</li> <li>Syntax for calling/using something in a namespace:    <code>namespace_name::name</code></li> <li>Function de\ufb01nitions with namespaces.<ul> <li>Inside the {...} the private member variables for <code>namespace_name</code> will be in scope.</li> <li><code>std::string Student::getName() {...}</code>, we can use  private member variables  in this function.</li> </ul> </li> </ul> <p>### This keyword</p> <p><code>this</code> is the pointer which points out the object that calls the member function. <code>this-&gt;element_name</code> means \"the item in this specific object with name <code>element_name</code>. Use this for avoiding naming con\ufb02icts. </p> <pre><code>```cpp\nvoid Student::setName(std::string name){\n    this-&gt;name = name;\n} \n</code></pre>"},{"location":"course/cs/cs106L/lec07_classes/#constructors","title":"Constructors","text":"<ul> <li>The constructor is called every time a new instance is created</li> <li>De\ufb01ne how the member variables of an object is initialized.</li> <li>Use initializer lists for speedier construction.</li> </ul> <pre><code>```cpp\n// construction using initializer lists\n// no parameters\nStudent::Student() : name{\"\"}, age{0}, state{\"\"} {}\n\n// with parameters\nStudent::Student(string name, int age, string state) : name{name}, age{age}, state{state} {}\n</code></pre>"},{"location":"course/cs/cs106L/lec07_classes/#array","title":"Array","text":"<ul> <li>Arrays are a primitive type. They are the building blocks of all containers</li> <li>Think of array as lists of objects of \ufb01xed size that you can index into.</li> </ul> <pre><code>int *intarray;\n// initialize an array\nint* *intarray = new int[10];\n// index into an array\nint elem = intarray[0];\n</code></pre>"},{"location":"course/cs/cs106L/lec07_classes/#destructors","title":"Destructors","text":"<ul> <li>Deleteing (almost) always happens in the destructor of a class.</li> <li>The destructor is de\ufb01ned using <code>class_name::~class_name()</code></li> <li>the destructor is called when the object goes out of scope.</li> </ul>"},{"location":"course/cs/cs106L/lec07_classes/#static-member","title":"Static member","text":"<p><code>Static member</code> meas this member is belong to the class instead of the specific object.</p> <p>static variable must have definition.</p> <pre><code>```cpp\nclass Game {\n public:\n  Game(/* args */);\n  ~Game(/* args */);\n  void setID(int id) { Game::id = id; }\n  int getID() { return id; }\n\n private:\n  /* data */\n  static int id;\n};\n</code></pre> <p>In this code, <code>id</code> is a variable member belong to the class <code>Game</code>, if we call <code>obj.setID(val)</code>, the variable <code>Game:\uff1aid</code> wouble be changed.</p> <pre><code>```cpp\nint main(void) {\n  Game game1;\n  game1.setID(2);\n  cout &lt;&lt; \"game1 id: \";\n  cout &lt;&lt; game1.getID() &lt;&lt; endl; // 2\n\n  Game game2;\n  cout &lt;&lt; \"game2 id: \";\n  cout &lt;&lt; game2.getID() &lt;&lt; endl; // 2\n  return 0;\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec08_templates/","title":"TOC","text":"<ul> <li>[[#Template|Template]]<ul> <li>[[#Template#Function Template|Function Template]]</li> <li>[[#Template#Class Template|Class Template]]</li> <li>[[#Template#Generic Programming|Generic Programming]]</li> <li>[[#Template#Template Metaprogramming|Template Metaprogramming]]</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec08_templates/#template","title":"Template","text":""},{"location":"course/cs/cs106L/lec08_templates/#function-template","title":"Function Template","text":"<p><code>Function Template</code>: A function template defines a family of functions. The simple idea is to pass data type as a parameter so that we don\u2019t need to write the same code for different data types.</p> <pre><code>```cpp\n// we need `typename` or `class` keyword \ntemplate &lt;typename T&gt;\n// default parameter types\ntemplate &lt;typename T=int&gt;\nT myMax(T x, T y) {\n  return (x &gt; y) ? x : y;\n}\n\n// function call\nint int_max = myMax&lt;int&gt;(2, 7); // int_max = 7\ndouble double_max = MyMax&lt;double&gt;(2.4, 5.1); // double_max = 5.1\n\n// template arguments deduction\nmyMax(1, 2); // infers that T is of type `int`\nmyMax(1.2, 3.9); // infers that T is of type `double`\nmyMax('a', 'i'); // infers that T is of type `char`\n</code></pre> <p>Explicit instantiation - specify the type T - <code>cout &lt;&lt; myMax&lt;int&gt;(2, 3) &lt;&lt; endl;</code></p> <p>Implicit instantiation - leave the type for the compiler to deduce - <code>cout &lt;&lt; myMax(2, 3) &lt;&lt; endl</code></p> <pre><code>**template functions are not compiled until used!**\nFor each instantiation with different parameters, the compiler generates a new specific version of your template at compile time.\nTemplate code is instantiated at compile time.\n</code></pre>"},{"location":"course/cs/cs106L/lec08_templates/#class-template","title":"Class Template","text":"<p><code>Class Template</code>: A class that is parametrized over some number of types. A class that is comprised of member variables of a general type/types. Use generic typenames as placeholders.</p> <pre><code>```cpp\ntemplate&lt;typename F, typename S&gt;\n// we can specify a default value for template arguments\n// etc. template&lt;typename F, typename S=int&gt;\nclass MyPair {\n    public:\n        First getFirst();\n        Second getSecond();\n        void setFirst(First f);\n        void setSecond(Second f);\n\n    private:\n        First first;\n        Second second;\n};\n\n// must announce every member function is templated\ntemplate&lt;typename F, typename S&gt;\nFirst MyPair::getFirst(){\n    return first;\n}\n\n// nested dependent type \ntemplate&lt;typename F, typename S&gt;\ntypename MyPair&lt;F, S&gt;::iterator MyPair&lt;F, S&gt;::begin() {...}\n// here iterator is a `dependent type` in namespace Mypair&lt;F, S&gt;::\n// we must add `typename` prior\n</code></pre> <p>Templated code implementation should never be in a .cpp file: your compiler has to see them at the same time as it sees the code that calls them.</p>"},{"location":"course/cs/cs106L/lec08_templates/#generic-programming","title":"Generic Programming","text":"<p>Generic Programming\u00a0is a programming paradigm for developing\u00a0efficient,\u00a0reusable\u00a0software libraries. Generics is the idea to allow type (Integer, String, \u2026 etc) to be a parameter to methods, classes and interfaces. Generics can be implemented in C++ using\u00a0Templates.</p> <p>The advantages of Generic Programming are - Code Reusability - Avoid Function Overloading - Once written it can be used for multiple times and cases.</p>"},{"location":"course/cs/cs106L/lec08_templates/#template-metaprogramming","title":"Template Metaprogramming","text":"<p>Normally, code runs during runtime. But with <code>template metaprogramming(TMP)</code>, code runs once during compile time. Something runs once during compiling and can be used as many times as you like during runtime.</p> <pre><code>```cpp\ntemplate &lt;unsigned n&gt;\nstruct Factorial {\n    enum {value = n * Factorial&lt;n-1&gt;::value};\n};\n\ntemplate&lt;&gt; // template class `specialization`\nstruct Factorial&lt;0&gt; {\n    enum {value = 1};\n};\n\ncout &lt;&lt; Factorial&lt;10&gt;::value &lt;&lt; endl; // print 3628800\n</code></pre> <p><code>struct</code> is similar to <code>class</code> in that it can contain both member variables and member functions.</p> <p>the difference of struct and class - When using class, the members of a class are all private by default, while when using struct, the members of a struct are all public by default. - class can be used as a template keyword, while struct cannot. - class inheritance is private inheritance by default, while struct inheritance is public inheritance by default</p>"},{"location":"course/cs/cs106L/lec09_funcs_and_lambdas/","title":"TOC","text":"<ul> <li>[[#Predicate Functions|Predicate Functions]]</li> <li>[[#Lambdas|Lambdas]]</li> <li>[[#Functors|Functors]]</li> </ul>"},{"location":"course/cs/cs106L/lec09_funcs_and_lambdas/#predicate-functions","title":"Predicate Functions","text":"<p>Any function that returns a boolean value is a <code>predicate.</code> A predicate can have any amount of parameters.</p> <pre><code>```cpp\nbool isVowel(char c){\n    std::string vowel = \"aeiou\";\n    return vowel.find(c) != std::string::npos;\n}\n\n// to use predicate\ntemplate &lt;typename InputIt, typename UniPred&gt;\nint count_occurrences(InputIt begin, InputIt end, UniPred pred){\n    int count = 0;\n    for (auto iter = begin; iter != end; ++iter){\n        if(pred(*iter)) count++;\n    }\n    return count;\n}\n\nstd::string str = \"xadia\";\ncount_occurrences(str.begin(), str.end(), isVowel);\n</code></pre> <p>Here <code>UniPred</code> is called a <code>function pointer</code>. - Function pointers can be treated just like other pointers. - They can be passed around like variables as parameters or in template functions. - They can be called like functions.</p>"},{"location":"course/cs/cs106L/lec09_funcs_and_lambdas/#lambdas","title":"Lambdas","text":"<p><code>Lambdas</code> are inline, anonymous functions that can know about variables declared in their same scope. </p> <pre><code>```cpp\n// complete format of lambda expression\n[ capture list ] ( params ) mutable(optional) constexpr(optional)(c++17) exception attribute -&gt; return_type { function body } \n\nint limit = 5;\nauto isMoreThan = [limit] (int n) {return n &gt; limit;};\nisMoreThan(6); // true\n\n// specify the return type `int` \nauto add = [](int a, int b) -&gt; int { return a + b; };\n\n// assignment is forbidden\nauto funa = [] { cout &lt;&lt; \"A\" &lt;&lt; endl; };\nauto funb = [] { cout &lt;&lt; \"B\" &lt;&lt; endl; };\n\nfuna = funb;   // error\nauto func = funa;   // ok, copy is permitted\n</code></pre> <p>Lambdas can capture any outside variable by using <code>[]</code>, both by reference and by value.</p> <p></p> <ul> <li>Use a lambda when you need a short function or to access local variables in your function.</li> <li>If you need more logic or overloading, use function pointers.</li> </ul> <p>Whenever a lambda expression is defined, the compiler will automatically generate an anonymous class, we call it <code>closure class</code>, this class overloads <code>()</code> operator of course.</p> <pre><code>```cpp\nclass Closure\n{\npublic:\n    // ...\n    ReturnType operator(params) const { body };\n};\n</code></pre>"},{"location":"course/cs/cs106L/lec09_funcs_and_lambdas/#functors","title":"Functors","text":"<p>A <code>functor</code> is any class that provides an implementation of operator(). They can create closures of \"customized\" functions.</p> <pre><code>**Actually, this name never appears in the standard c++, we usually call it `function object`.**\n</code></pre> <p><code>Closure</code>: a single instantiation of a functor object.</p> <p>The STL  standard function object: <pre><code>std::function&lt;return_type(param_types)&gt; func;\n</code></pre></p>"},{"location":"course/cs/cs106L/lec10_operator_overloading/","title":"TOC","text":"<ul> <li>[[#Operators|Operators]]<ul> <li>[[#Operators#Operators can't be overloaded|Operators can't be overloaded]]</li> <li>[[#Operators#The way of overloading operators|The way of overloading operators]]</li> <li>[[#Operators#Rules and Philosophy|Rules and Philosophy]]</li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec10_operator_overloading/#operators","title":"Operators","text":"<ul> <li>Just like declaring functions in a class, we can declare operator functionality.</li> <li>When we use the operator with our new object, it performs a custom function or operation.</li> <li>Just like in function overloading, if we give it the same name, it will override the operator\u2019s behavior.</li> </ul>"},{"location":"course/cs/cs106L/lec10_operator_overloading/#operators-cant-be-overloaded","title":"Operators can't be overloaded","text":"<ul> <li>Scope Resolution: <code>::</code></li> <li>Ternary: <code>?</code></li> <li>Member Access: <code>.</code></li> <li>Pointer-to-member access: <code>.*</code></li> <li>Object size, type, and casting: <code>sizeof()</code>\u3001<code>typeid()</code>\u3001<code>cast()</code></li> </ul>"},{"location":"course/cs/cs106L/lec10_operator_overloading/#the-way-of-overloading-operators","title":"The way of overloading operators","text":"<ul> <li>Member functions<ul> <li>With member function overloading, we have access to this-&gt; and its private variables.</li> </ul> </li> <li>Non-member functions (this way is preferred by the STL)<ul> <li>It allows the LHS to be a non-class type.</li> <li>It allows us to overload operators with classes we don\u2019t own.</li> </ul> </li> <li>The <code>friend</code> keyword allows non-member functions or classes to access private information in another class.</li> </ul> <pre><code>```cpp\n// first way\nclass Student{\n    public:\n        /* ... */\n        // member function\n        // this function would pass `this` as parameter\n        friend bool operator &lt; (const Student&amp; rhs){\n            age &lt; rhs.age;\n        };\n\n    private:\n    /* ... */\n    int age;\n};\n\n// second way\nclass Student{\n    public:\n        /* ... */\n        // non-member function\n        friend bool operator &lt; (const Student&amp; lhs, const Student&amp; rhs);\n\n    private:\n    /* ... */\n    int age;\n};\n\n// non-member function(global)\nbool operator &lt; (const Student&amp; lhs, const Student&amp; rhs) {\n    return lhs.age &lt; rhs.age;\n};\n</code></pre> <p>Non-member function(global function) of operator overloading(global overloading)</p> <pre><code>```cpp\nstruct Time {\n  int hours;\n  int minutes;\n  int seconds;\n};\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Time&amp; time) {\n  out &lt;&lt; time.hours &lt;&lt; \":\" &lt;&lt; time.minutes &lt;&lt; \":\" &lt;&lt; time.seconds;\n  return out;\n}\n\nTime t1{12, 20, 56};\ncout &lt;&lt; t1; // 12:20:56\n</code></pre> <p>The implementation of <code>&lt;&lt;</code> operator in STL <code>basic_ostream</code>.</p> <pre><code>```cpp\ntemplate&lt;typename _Traits&gt;\n  inline basic_ostream&lt;char, _Traits&gt;&amp;\n  operator&lt;&lt;(basic_ostream&lt;char, _Traits&gt;&amp; __out, const char* __s)\n  {\n    if (!__s)\n_out.setstate(ios_base::badbit);\n    else\n_ostream_insert(__out, __s,\n     static_cast&lt;streamsize&gt;(_Traits::length(__s)));\n    return __out;\n  }\n</code></pre> <pre><code>**Be careful with non-member overloading.**\nCertain operators, like `new` and `delete,` don\u2019t require a specific type.\n</code></pre>"},{"location":"course/cs/cs106L/lec10_operator_overloading/#rules-and-philosophy","title":"Rules and Philosophy","text":"<ul> <li>Meaning should be obvious when you see it.</li> <li>Functionality should be reasonably similar to corresponding arithmetic operations</li> <li>When the meaning isn't obvious, give it a normal name instead.</li> </ul>"},{"location":"course/cs/cs106L/lec11_special_member_functions/","title":"TOC","text":"<ul> <li>[[#Special member functions|Special member functions]]<ul> <li>[[#Special member functions#Copy and copy assignment|Copy and copy assignment]]</li> <li>[[#Special member functions#Default and delete|Default and delete]]</li> <li>[[#Special member functions#Move and move assignment|Move and move assignment]]<ul> <li>[[#Move and move assignment#r-value reference|r-value reference]]</li> <li>[[#Move and move assignment#move assignment|move assignment]]</li> <li>[[#Move and move assignment#std::move|std::move]]</li> </ul> </li> </ul> </li> </ul>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#special-member-functions","title":"Special member functions","text":"<p>There are six special member functions, These functions are generated only when they're called: - Default constructor: Takes no parameters and creates a new object. - Destructor: Called when an object goes out of scope. - Copy constructor: Creates a new object as a member-wise copy of another. - Copy assignment operator: Assigns an already existing object to another. - Move constructor - Move assignment operator</p> <p></p> <p>We don't have to write out any of these. They all have default versions that are generated automatically.</p>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#copy-and-copy-assignment","title":"Copy and copy assignment","text":"<p>By default, the copy constructor will create copies of each member variable. This is member-wise copying. Many times, we will want to create a copy that does more than just copies the member variables.</p> <p><code>Deep copy</code>: An object that is a complete, independent copy of the original.</p> <pre><code>// copy constructor\nType::Type(const Type&amp; other)\n// copy assignment\nType::operator=(const Type&amp; other)\n</code></pre>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#default-and-delete","title":"Default and delete","text":"<p><code>default</code> and <code>delete</code> are key words  in c++.</p> <p>Declaring any user-de\ufb01ned constructor will make the default disappear. If we need to use the default special member function we need add <code>=default</code>. <code>=default</code>  is only used for special member functions of the class that have no default parameters. Can be defined either inside the class body (inline) or outside the class body (out-of-line).</p> <pre><code>```cpp\nclass Student {\n public:\n  // member function\n  Student(int age);\n  Student() = default; // defulated default constructor.\n  ~Student();\n\n private:\n  int age;\n};\n\nStudent::Student(int age) : age(age) {}\nStudent::~Student() {}\n\nStudent s0; // error if there is no defaulted function\nStudent s1(19);\nStudent s2(29);\n</code></pre> <p>Setting a special member function to <code>=delete</code> removes its functionality. Thus we can selectively allow functionality of special member functions.  <code>=delete</code> can not be used at <code>destructor</code>.</p> <pre><code>```cpp\nclass Student {\n public:\n  // member function\n  Student(int age);\n  Student() = default; // defulated default constructor.\n  ~Student();\n\n  Student(const Student&amp; rhs) = delete; // delete the copy constructor\n  Student&amp; operator=(Student&amp; other) = delete; // delete the copy assignment\n\n  // ~Student() = delete; // error, destructor can't be deleted\n\n private:\n  int age;\n};\n\nStudent::Student(int age) : age(age) {}\nStudent::~Student() {}\n\nStudent s1(19);\nStudent s2(s1); // error, copy constructor has been deleted\n\nStudent s3;\ns3 = s2; // error, copy assignment has been deleted\n</code></pre>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#move-and-move-assignment","title":"Move and move assignment","text":"<p>Move constructors and move assignment operators will perform \"memberwise moves\". De\ufb01ning a move assignment operator prevents generation of a move copy constructor, and vice versa.</p> <p>Move constructors and operators are only generated if: - No copy operations are declared. - No move operations are declared. - No destructor is declared.</p> <p>If we want to explicitly support move operations, we can set the operators to <code>default</code>:</p> <p></p> <p>When the item on the right of the <code>=</code> is an r-value we should use move assignment. r-values are always about to die, so we can steal their resources.</p>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#r-value-reference","title":"r-value reference","text":"<p>Different with l-value reference, we use <code>&amp;&amp;</code> to present r-value reference.</p>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#move-assignment","title":"move assignment","text":"<pre><code>```cpp\nvector&lt;T&gt;&amp; operator=(vector&lt;T&gt;&amp;&amp; other)\n{\n    if (&amp;other == this) return *this;\n    _size = other._size;\n    _capacity = other._capacity;\n\n    //we can steal the array\n    delete[] _elems;\n    _elems = other._elems;\n    return *this;\n}\n</code></pre>"},{"location":"course/cs/cs106L/lec11_special_member_functions/#stdmove","title":"std::move","text":"<p><code>std::move</code> function mainly converts a l-value into a r-value reference. Use <code>std::move</code> to force the use of other types' move assignments and constructors.</p> <pre><code>```cpp\nvector&lt;T&gt;&amp; operator=(vector&lt;T&gt;&amp;&amp; other)\n{\n    if (&amp;other == this) return *this;\n    _size = std::move(other._size);\n    _capacity = std::move(other._capacity);\n\n    //we can steal the array\n    delete[] _elems;\n    _elems = std::move(other._elems);\n    return *this;\n}\n\nvector&lt;string&gt; vec1 = {\"hello\", \"world\"}; // vec1 = {\"hello\", \"world\"}\nvector&lt;string&gt; vec2 = std::move(vec1); // vec2 = {\"hello\", \"world\"}\n                                  // vec1 = {}\n\nvec1.push_back(\"game\"); // vec1 = {\"game\"}\n\n// `vec1` is a l-value, we use `std::move` to convert it\n// also break the variable `vec1`\n</code></pre> <p>After a variable is moved via <code>std::move</code>, it should never be used until it is reassigned to a new variable.</p> <pre><code>**Don't use `std::move` outside of class definitions, never use it in application code.**\n</code></pre>"},{"location":"course/cs/cs106L/lec12_type_safety/","title":"TOC","text":"<ul> <li>[[#Type safety|Type safety]]</li> </ul>"},{"location":"course/cs/cs106L/lec12_type_safety/#type-safety","title":"Type safety","text":"<p><code>Type Safety</code>: The extent to which a language prevents typing errors and guarantees the behavior of programs.</p> <p><code>Unde\ufb01ned Behavior(UB)</code>: Function could crash, could give us garbage, could accidentally give us some actual value.</p> <p><code>std::optional&lt;T&gt;</code>: A template class which will either contain a value of type T or contain nothing (expressed as <code>nullopt</code>). <code>std::optional</code> is a tool that could make this happen: you can return either a value or nothing.</p> <pre><code>```cpp\nint main(){\n    std::optional&lt;int&gt; num1 = {}; // num1 does not have a value\n    // std::optional num1 = {2};     // type deduction\n    num1 = std::optional&lt;int&gt;{1}; // now it does!\n    num1 = std::nullopt; // now it doesn't anymore\n\n    return 0;\n}\n</code></pre> <p><code>std::optional</code> interface  - .value()      - returns the contained value or throws <code>bad_optional_access</code> error - .valueor(valueType val)     - returns the contained value or default value(parameter val) - .hasvalue()     - returns true if contained value exists, false otherwise</p> <p><code>std::optional</code> \"monadic\" interface(C++23)  - .andthen(function f)      - returns the result of calling f(value) if contained value exists, otherwise nullopt (f must return optional) - .orelse(function f)     - returns value if it exists, otherwise returns result of calling f - .transform(function f)     - returns the result of calling f(value) if contained value exists, otherwise nullopt (f must return optional)</p>"},{"location":"course/cs/cs106L/lec13_special_topics/","title":"TOC","text":"<ul> <li>[[#RALL|RALL]]</li> <li>[[#Smart Pointers|Smart Pointers]]</li> </ul>"},{"location":"course/cs/cs106L/lec13_special_topics/#raii","title":"RAII","text":"<p><code>Code path</code>: A single run-through of the code that the computer would see.</p> <p></p> <p>When a function has an error, it can crash the program. - This is known as \"throwing an exception\". However, we can write code to handle these to let us continue. - This is \"catching an exception\".</p> <p>There are (at least) 23 code paths in the code before - (1) copy constructor of Person parameter may throw - (5) constructor of temp string may throw - (6) call to favoritefood, favoritedrink, \ufb01rst (2), last(2), may throw - (10) operators may be user-overloaded, thus may throw - (1) copy constructor of string for return value may throw</p> <p>There are many resources that need to be returned after use.</p> <p></p> <p><code>RAII</code>: Resource Acquisition is Initialization In RAII - All resources used by a class should be acquired in the constructor - All resources used by a class should be released in the destructor - Avoid calling <code>new</code> and <code>delete</code> explicitly</p>"},{"location":"course/cs/cs106L/lec13_special_topics/#smart-pointers","title":"Smart Pointers","text":"<p>There are three types of <code>smart (RAII-safe) pointers</code>: - std::uniqueptr     - Uniquely owns its resource, can't be copied     - When a <code>unique_ptr</code> goes out of scope, it frees the memory associated with it - std::sharedptr     - Can make copies, destructed when underlying memory goes out of scope - std::weak_ptr     - Models temporary ownership: when an object only needs to be accessed if it exists (convert to shared_ptr to access)</p> <pre><code>```cpp\nstd::unique_ptr&lt;T&gt; up{new T};\nstd::unique_ptr&lt;T&gt; up = std::make_unique&lt;T&gt;();\n\nstd::shared_ptr&lt;T&gt; sp{new T};\nstd::shared_ptr&lt;T&gt; sp = std::make_shared&lt;T&gt;();\n\nstd::weak_ptr&lt;T&gt; wp = sp; // can only be copy/move constructed(or empty)\n</code></pre>"},{"location":"course/cs/cs231n/","title":"CS231n: Deep Learning for Computer Vision","text":"<p>Abstract</p> <ul> <li> Website: Latest version</li> <li> Video:<ul> <li>(2017 Spring)</li> <li>(2017 Spring)</li> </ul> </li> <li> Github repo:<ul> <li>Zicx's repo(2022 Spring)</li> <li>Course repo</li> </ul> </li> </ul>"},{"location":"course/cs/cs231n/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Lec01: \u8bfe\u7a0b\u4ecb\u7ecd</li> <li>Lec02: \u56fe\u50cf\u5206\u7c7b\u4efb\u52a1</li> </ul> <p>\u5728\u5b66\u4e60\u8fd9\u95e8\u8bfe\u7684\u65f6\u5019\u7531\u4e8e\u8d44\u6599\u90fd\u662f\u82f1\u6587\u7684\uff0c\u6240\u4ee5\u7528\u82f1\u6587\u8bb0\u7684\u7b14\u8bb0\uff0c\u5728\u7f51\u7ad9\u4e0a\u6392\u7248\u4f1a\u663e\u5f97\u5f88\u7a00\u758f\uff0c\u4e4b\u540e\u4f1a\u66f4\u65b0\u6210\u4e2d\u6587\u7b14\u8bb0\u7684\uff0c\u6709\u4e9b\u4e0d\u4f1a\u7ffb\u8bd1\u7684\u5730\u65b9\u4f1a\u4fdd\u7559\u539f\u59cb\u63cf\u8ff0\uff0c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u4e0d\u59a5\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u544a\u8bc9\u6211\u54e6 :)</p>"},{"location":"course/cs/cs231n/lec01_introduction_overview/","title":"\u8bfe\u7a0b\u4ecb\u7ecd","text":"<p> \u7ea6 160 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"course/cs/cs231n/lec01_introduction_overview/#_2","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5386\u53f2","text":"<p>\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u53d1\u5c55\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u9636\u6bb5</p> <ul> <li>\u89c6\u89c9\u8868\u5f81\uff081970s\uff09</li> <li>\u901a\u8fc7\u8fb9\u7f18\u68c0\u6d4b\u8fdb\u884c\u8bc6\u522b\uff081980s\uff09</li> <li>\u8ba4\u77e5\u548c\u795e\u7ecf\u79d1\u5b66\u9010\u6b65\u53d1\u5c55\uff0c\u89c6\u89c9\u6280\u672f\u5f00\u59cb\u5e94\u7528\uff08\u4eba\u8138\u8bc6\u522b\uff0c\u7269\u4f53\u68c0\u6d4b...\uff09\uff081995\uff09</li> <li>\u4eba\u7c7b\u5f00\u59cb\u66f4\u6df1\u5165\u5730\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff0c\u6df1\u5ea6\u5b66\u4e60\u6280\u672f\u9010\u6e10\u6210\u719f\uff082000s)</li> <li>CNN(LeCun)\uff0cImageNet\uff0cAlexNet...</li> <li>\u6df1\u5ea6\u5b66\u4e60\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5404\u4e2a\u5e94\u7528\u9886\u57df\uff082012\u81f3\u4eca\uff09</li> </ul>"},{"location":"course/cs/cs231n/lec01_introduction_overview/#_3","title":"\u8bfe\u7a0b\u603b\u89c8","text":"Syllabus"},{"location":"course/cs/cs231n/lec01_introduction_overview/#_4","title":"\u9884\u4fee\u8981\u6c42","text":"<ul> <li>\u7cbe\u901a Python \u548c NumPy</li> <li>\u5fae\u79ef\u5206\uff0c\u7ebf\u6027\u4ee3\u6570\uff0c\u6982\u7387\u8bba\u7b49\u6570\u5b66\u77e5\u8bc6</li> <li>\u673a\u5668\u5b66\u4e60\u57fa\u7840</li> </ul>"},{"location":"course/cs/cs231n/lec02_image_classification/","title":"\u56fe\u50cf\u5206\u7c7b\u548c\u7ebf\u6027\u5206\u7c7b\u5668","text":"<p> \u7ea6 1744 \u4e2a\u5b57  6 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#_2","title":"\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1","text":"<p>\u5728\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u8bad\u7ec3\u4e00\u7cfb\u5217\u7684\u56fe\u7247\u548c\u7c7b\u522b\uff0c\u7136\u540e\u5728\u6d4b\u8bd5\u96c6\u4e2d\u9884\u6d4b\u672a\u51fa\u73b0\u8fc7\u7684\u56fe\u7247\u7684\u7c7b\u522b</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#_3","title":"\u56fe\u50cf\u5206\u7c7b\u5668","text":"<pre><code>def classify_image(image):\n# Some magic here?\nreturn class_label\n</code></pre> <p>\u6ca1\u6709\u663e\u5f0f\u7684\u7b97\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#_4","title":"\u6570\u636e\u9a71\u52a8\u7684\u65b9\u6cd5","text":"<ul> <li>\u6536\u96c6\u4e00\u7cfb\u5217\u5177\u6709\u56fe\u7247\u548c\u7c7b\u522b\u7684\u6570\u636e\u96c6</li> <li>\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7684\u7b97\u6cd5\u8bad\u7ec3\u4e00\u4e2a\u5206\u7c7b\u5668</li> <li>\u5728\u65b0\u7684\u6d4b\u8bd5\u56fe\u7247\u4e2d\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u5206\u7c7b\u5668\u9884\u6d4b\u7c7b\u522b</li> </ul>"},{"location":"course/cs/cs231n/lec02_image_classification/#_5","title":"\u6700\u8fd1\u90bb","text":"<p>\u8ddd\u79bb\u7684\u5ea6\u91cf\u65b9\u5f0f\uff1a</p> <p>L1 (Manhattan) \u8ddd\u79bb</p> \\[ d_1(I_1, I_2) = \\sum_p | I_1^p - I_2^p | \\]"},{"location":"course/cs/cs231n/lec02_image_classification/#_6","title":"\u7b97\u6cd5","text":"<pre><code>For each test image\nFind closest train image\nPredict label of nearest image\n</code></pre> \u6700\u8fd1\u90bb\u793a\u610f\u56fe"},{"location":"course/cs/cs231n/lec02_image_classification/#k-","title":"K-\u6700\u8fd1\u90bb","text":"<p>\u6311\u9009\u6700\u76f8\u8fd1\u7684K\u4e2a\u6837\u672c\uff0c\u8fdb\u884c\u6295\u7968\u51b3\u7b56\uff0c\u4ece\u800c\u9884\u6d4b\u65b0\u7684\u7c7b\u522b</p> <p>\u53e6\u4e00\u79cd\u8ddd\u79bb\u7684\u5ea6\u91cf\u65b9\u5f0f\uff1a</p> <p>L2 (Euclidean) \u8ddd\u79bb</p> \\[ d_2(I_1, I_2) = \\sqrt{\\sum_p (I_1^p - I_2^p)^2} \\] <p> </p> K\u6700\u8fd1\u90bb\u793a\u610f\u56fe <p>Note</p> <p>\u6839\u636e\u4e0a\u9762\u7684\u56fe\u7247\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u540c\u7684K\u503c\u7684\u5206\u7c7b\u7ed3\u679c\u4e2d\uff0c\u51b3\u7b56\u8fb9\u754c\u7684\u5e73\u6ed1\u7a0b\u5ea6\u6709\u5f88\u5927\u7684\u4e0d\u540c</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#_7","title":"\u8d85\u53c2\u6570","text":"<ul> <li>\u6700\u4f73\u7684\u53c2\u6570 K\u5e94\u8be5\u662f\u4ec0\u4e48</li> <li>\u6700\u4f73\u7684\u8ddd\u79bb\u5ea6\u91cf\u65b9\u5f0f(L1, L2...)\u5e94\u8be5\u662f\u4ec0\u4e48</li> </ul> <p>K-\u6700\u8fd1\u90bb\u7b97\u6cd5\u57fa\u672c\u4e0d\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1</p> <ul> <li>\u8ddd\u79bb\u96be\u4ee5\u63cf\u8ff0\uff0c\u50cf\u7d20\u8868\u793a\u7684\u4fe1\u606f\u91cf\u592a\u5c11</li> <li>\u7ef4\u5ea6\u707e\u96be\uff0c\u8ba1\u7b97\u590d\u6742</li> </ul>"},{"location":"course/cs/cs231n/lec02_image_classification/#_8","title":"\u7ebf\u6027\u5206\u7c7b\u5668","text":""},{"location":"course/cs/cs231n/lec02_image_classification/#_9","title":"\u6a21\u578b","text":"\\[ f(x, W) = Wx + b \\] <ul> <li>\\(x\\) \u7684\u5927\u5c0f\u662f \\(3072 \\times 1\\)\uff0c\u5c06\u8f93\u5165\u7684\u56fe\u7247(\\(32 \\times 32 \\times 3\\)) \u5c55\u5e73\u4e3a\u5411\u91cf</li> <li>\\(W\\) \u7684\u5927\u5c0f\u662f \\(10 \\times 3072\\)\uff0c\u4ee3\u8868\u6743\u91cd\u6216\u53c2\u6570\uff0c\u5176\u4e2d \\(10\\) \u662f\u7c7b\u522b\u603b\u6570</li> <li>\\(f\\) \u7684\u5927\u5c0f\u662f \\(10 \\times 1\\)\uff0c\u4ee3\u8868\u5404\u4e2a\u7c7b\u522b\u6700\u540e\u7684\u5f97\u5206</li> <li>\\(b\\) \u662f\u504f\u5dee\uff0c\u7528\u4e8e\u8c03\u6574\u5206\u7c7b\u5668\u7684\u53c2\u6570</li> </ul> <p>\u4e0b\u56fe\u662f\u4e00\u4e2a\u8ba1\u7b97\u7684\u4f8b\u5b50\uff1a</p> <p></p>"},{"location":"course/cs/cs231n/lec02_image_classification/#_10","title":"\u51e0\u4f55\u89d2\u5ea6\u7406\u89e3","text":"<p>Note</p> <p>\u5728\u4e0a\u56fe\u7684\u5e73\u9762\u5750\u6807\u7cfb\u4e2d\uff0c\u6bcf\u5f20\u56fe\u50cf\uff08\u9ad8\u7ef4\u4e2d\u7684\u5bf9\u8c61\uff09\u90fd\u662f\u4e00\u4e2a\u5750\u6807\u70b9\uff0c\u5206\u7c7b\u5668\u8bad\u7ec3\u51fa\u6765\u7684\u6743\u503c\u5f62\u6210\u4e86\u8fd9\u4e9b\u5206\u754c\u7ebf\uff0c\u6cbf\u7740\u5206\u754c\u7ebf\u7bad\u5934\u6240\u793a\u65b9\u5411\u7684\u56fe\u50cf\u5f97\u5206\u9010\u6e10\u63d0\u9ad8\uff0c\u8bf4\u660e\u5206\u7c7b\u7ed3\u679c\u662f\u6b63\u786e\u7684\uff0c\u800c\u76f8\u53cd\u65b9\u5411\u7684\u56fe\u50cf\u5f97\u5206\u9010\u6e10\u964d\u4f4e\uff0c\u8bf4\u660e\u5206\u7c7b\u7ed3\u679c\u9519\u8bef\uff0c\u8fd9\u5f20\u56fe\u4e5f\u8bf4\u660e\u4e86\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u5177\u6709\u5c40\u9650\u6027\uff0c\u5728\u63cf\u8ff0\u4fe1\u606f\u7684\u80fd\u529b\u4e0a\u5b58\u5728\u5f88\u5927\u7684\u4e0d\u8db3</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#svm","title":"\u591a\u7c7b\u522b SVM","text":"<p>\u652f\u6301\u5411\u91cf\u673a(Support Vector Machine, SVM)\u662f\u4e00\u7c7b\u6309\u76d1\u7763\u5b66\u4e60\u65b9\u5f0f\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u7684\u7ebf\u6027\u5206\u7c7b\u5668</p> <p>\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8bc4\u4f30\u5f53\u524d\u5206\u7c7b\u5668\u7684\u8868\u73b0\u5982\u4f55\uff0c\u91cf\u5316\u5f53\u524d\u7684\u504f\u5dee\u5230\u5e95\u6709\u591a\u5c11\uff0c\u4ece\u800c\u5e2e\u52a9\u6211\u4eec\u6311\u9009\u66f4\u4f18\u7684\u6743\u91cd\u53c2\u6570</p> <p>SVM \u7684\u635f\u5931\u51fd\u6570\u53eb\u505a\u5408\u9875\u635f\u5931(Hinge Loss)</p> \\[ \\begin{aligned} L_i &amp; =\\sum_{j \\neq y_i} \\begin{cases}0 &amp; \\text { if } s_{y_i} \\geq s_j+1 \\\\ s_j-s_{y_i}+1 &amp; \\text { otherwise }\\end{cases} \\\\ &amp; =\\sum_{j \\neq y_i} \\max \\left(0, s_j-s_{y_i}+1\\right) \\\\ L &amp;= \\frac{1}{N} \\sum_{i=1}^N L_i \\end{aligned} \\] <p>\u4e0a\u5f0f\u4e2d\u7684 \\(s_{y_{i}}\\) \u4ee3\u8868\u7684\u662f\u6b63\u786e\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u5206\u6570\uff0c\\(s_j\\) \u4ee3\u8868\u7684\u662f\u5176\u4ed6\u7c7b\u522b\u5bf9\u5e94\u7684\u5206\u6570</p> <p>Tip</p> <p>\u4e8b\u5b9e\u4e0a \\(s_j - s_{y_i} +1\\) \u4e2d\u7684 \\(1\\) \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u5404\u4e2a\u7c7b\u522b\u5f97\u5206\u7684\u76f8\u5bf9\u5dee\u503c\uff0c\u6240\u4ee5\u8fd9\u4e2a \\(1\\) \u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u6765\u8c03\u6574\uff0c\u7531\u4e8e SVM Loss \u662f\u4e00\u4e2a\u5f88\u5e38\u7528\u7684\u635f\u5931\u51fd\u6570\uff0c\u4e00\u822c\u6211\u4eec\u5c31\u7528\u9ed8\u8ba4\u53c2\u6570</p> <p>\u4e00\u4e2a\u8ba1\u7b97 SVM Loss \u7684\u4f8b\u5b50\uff1a</p> <p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u6709\u4e09\u4e2a\u7c7b\u522b\\((cat/car/frog)\\)\u548c\u4e09\u5f20\u56fe\u7247\\((img_1/img_2/img_3)\\)\uff0c\u5b83\u4eec\u7684\u5f97\u5206\u5982\u4e0b\uff1a</p> \\(img_1(cat)\\) \\(img_2(car)\\) \\(img_3(frog)\\) \\(cat\\) 3.2 1.3 2.2 \\(car\\) 5.1 4.9 2.5 \\(frog\\) -1.7 2.0 -3.1 <p>\u73b0\u5728\u8ba1\u7b97 \\(img_1\\) \u7684\u635f\u5931\u503c\uff0c\u5b83\u7684\u771f\u5b9e\u7c7b\u522b\u662f \\(cat\\)\uff0c\u5bf9\u5e94 \\(y_i\\)</p> \\[ \\begin{aligned} L_1 &amp;= max(0, 5.1-3.2+1) + max(0, -1.7-3.2+1) \\\\ &amp;= max(0, 2.9) + max(0, -3.9) \\\\ &amp;= 2.9 \\end{aligned} \\] <p>\u540c\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 \\(img_2\\) \u548c \\(img_3\\) \u7684\u635f\u5931\u503c\u5206\u522b\u4e3a \\(L_2 =0, L_3 = 12.9\\)</p> <p>\u6700\u540e\u7684\u603b\u635f\u5931\u503c</p> \\[ L = \\frac{2.9+0+12.9}{3} = 5.27 \\]"},{"location":"course/cs/cs231n/lec02_image_classification/#softmax","title":"Softmax \u5206\u7c7b\u5668","text":"<p>\u5c06\u5404\u4e2a\u7c7b\u522b\u7684\u539f\u59cb\u5f97\u5206\u8f6c\u5316\u4e3a\u6982\u7387</p> \\[ \\begin{aligned} &amp; s = f\\left(x_i ; W\\right) \\\\ &amp; P\\left(Y=k \\mid X=x_i\\right) = \\frac{e^{s_k}}{\\sum_j e^{s_j}} \\end{aligned} \\] <p>\u6700\u540e\u5404\u4e2a\u7c7b\u522b\u7684\u6982\u7387\u76f8\u52a0\u8981\u7b49\u4e8e 1</p> <p>Softmax \u7684\u635f\u5931\u51fd\u6570\u53eb\u505a\u4ea4\u53c9\u71b5\u635f\u5931(Cross Entropy Loss)</p> \\[ \\begin{aligned} L_i &amp;= -\\log \\left(\\frac{e^{s_{y_i}}}{\\sum_j e^{s_j}}\\right) \\\\ L &amp;= \\frac{1}{N} \\sum_{i=1}^N L_i \\end{aligned} \\] <p>\u8fd9\u91cc\u5bf9\u6570\u662f\u81ea\u7136\u5bf9\u6570\\((e)\\)\uff0c\u800c\u4e0d\u662f\u4ee5 \\(2\\) \u6216 \\(10\\) \u4e3a\u5e95\u7684\u5bf9\u6570</p> <p>\u4e00\u4e2a\u8ba1\u7b97 Softmax Loss \u7684\u4f8b\u5b50\uff1a</p> <p>\u8fd8\u662f\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u6709\u4e09\u4e2a\u7c7b\u522b\u548c\u4e09\u5f20\u56fe\u7247\uff0c\u5b83\u4eec\u7684\u5f97\u5206\u5982\u4e0b\uff1a</p> \\(img_1(cat)\\) \\(img_2(car)\\) \\(img_3(frog)\\) \\(cat\\) 3.2 1.3 2.2 \\(car\\) 5.1 4.9 2.5 \\(frog\\) -1.7 2.0 -3.1 <p>\u4ee5 \\(img_1\\) \u4e3a\u4f8b\uff0c\u5148\u5bf9\u6bcf\u4e00\u4e2a\u5f97\u5206\u53d6 \\(e\\) \u7684\u6307\u6570\uff0c\u5f97\u5230 \\([24.5, 164.0, 0.18]\\)</p> <p>\u518d\u6839\u636e softmax \u7b97\u5b50\u8ba1\u7b97\u5f97\u5230\u6982\u7387 \\([0.13, 0.87, 0.00]\\)</p> <p>\u73b0\u5728\u8ba1\u7b97 \\(img_1\\) \u7684\u635f\u5931\uff0c\u5b83\u7684\u771f\u5b9e\u7c7b\u522b\u662f \\(cat\\)\uff0c\u5bf9\u5e94 \\(y_i\\)</p> \\[ \\begin{aligned} L_1 &amp;= -log P(Y=y_i | X = x_i) \\\\ &amp;= -log(0.13) \\\\ &amp;= 2.04 \\end{aligned} \\] <p>\u540c\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 \\(img_2\\) \u548c \\(img_3\\) \u7684\u635f\u5931\u503c\u5e76\u53d6\u5e73\u5747\u503c\u5f97\u5230\u6700\u540e\u7684\u635f\u5931\u503c</p>"},{"location":"course/cs/cs231n/lec02_image_classification/#svm-softmax","title":"\u5bf9\u6bd4 SVM \u548c Softmax","text":"<p>\u4e0b\u9762\u8fd9\u5f20\u56fe\u6709\u52a9\u4e8e\u6211\u4eec\u8ba4\u8bc6 SVM \u548c Softmax \u5206\u7c7b\u5668\u4e4b\u95f4\u7684\u533a\u522b</p> <p></p> <p>Note</p> <p>\u5728\u4e0a\u56fe\u4e2d\uff0c\u6211\u4eec\u5206\u522b\u8ba1\u7b97\u4e86\u540c\u4e00\u4e2a\u5206\u6570\u5411\u91cf(score vector) \\(f\\) \u7684 SVM Loss \u548c Softmax Loss \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u8fd9\u4e24\u4e2a\u5206\u7c7b\u5668\u5bf9\u4e8e \\(f\\) \u4e2d\u7684\u5206\u6570\u7684\u89e3\u91ca</p> <ul> <li>SVM \u5206\u7c7b\u5668\u5c06\u5206\u6570\u89e3\u91ca\u4e3a\u7c7b\u522b\u5f97\u5206\uff0c\u56e0\u6b64\u5b83\u9f13\u52b1\u6b63\u786e\u7c7b\u522b\u6700\u540e\u7684\u5f97\u5206\u9ad8\uff0c\u90a3\u4e48\u5728\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f \\(max(0, s_j - s_{y_i} + 1)\\)\uff0c\u5f53 \\(s_{y_i}\\) \u76f8\u5bf9\u8f83\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u503c\u4e00\u76f4\u662f0\uff0c\u6240\u4ee5\u5bf9\u4e8e\u635f\u5931\u503c\u7684\u8d21\u732e\u5f88\u5c11     SVM \u5206\u7c7b\u5668\u66f4\u5bb9\u6613\u6ee1\u8db3\u4e00\u4e9b\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b83\u53ea\u9700\u8981\u5173\u6ce8\u5185\u90e8\u7684\u76f8\u5bf9\u5f97\u5206\u5373\u53ef\uff0c\u4e0d\u592a\u5728\u610f\u635f\u5931\u503c\u7684\u7edd\u5bf9\u5927\u5c0f\uff0c\u6bd4\u5982\u5047\u8bbe \\(f = [10, -100, -100] \\quad \\text{or} \\quad f = [10, 9, 9]\\)\uff0c\u5219\u7b2c\u4e00\u7c7b\u5bf9\u5e94\u7684 SVM Loss \u90fd\u4e3a0\uff0c\u4f46\u4ece\u5f97\u5206\u53ef\u4ee5\u8bf4\u660e\u7b2c\u4e00\u7c7b\u662f\u5206\u7c7b\u6b63\u786e\u7684</li> <li>Softmax \u5206\u7c7b\u5668\u5c06\u5206\u6570\u89e3\u91ca\u4e3a\u6bcf\u4e2a\u7c7b\u7684\uff08\u975e\u6807\u51c6\u5316\u7684\uff09\u5bf9\u6570\u6982\u7387\uff0c\u56e0\u6b64\u5b83\u9f13\u52b1\u6b63\u786e\u7c7b\u522b\u7684\u5bf9\u6570\u6982\u7387\u4e3a\u9ad8\uff0c\u5728\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f \\(-log P(Y=y_i | X = x_i)\\)\uff0c\u6982\u7387\u8d8a\u9ad8\u5bf9\u5e94\u7684\u635f\u5931\u503c\u8d8a\u5c0f     Softmax \u5206\u7c7b\u5668\u65e0\u6cd5\u5224\u65ad\u6b63\u786e\u7684\u7c7b\u522b\u662f\u4ec0\u4e48\uff0c\u5b83\u53ea\u80fd\u7ed9\u51fa\u5404\u4e2a\u7c7b\u522b\u7684\u6982\u7387\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f6e\u4fe1\u5ea6</li> <li>\u4f7f\u7528\u4e0d\u540c\u5206\u7c7b\u5668\u8ba1\u7b97\u5f97\u5230\u7684\u635f\u5931\u503c\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u8fd9\u6837\u7684\u6bd4\u8f83\u6ca1\u6709\u610f\u4e49\uff08\u6807\u51c6\u4e0d\u540c\uff09\uff0c\u635f\u5931\u51fd\u6570\u662f\u4e00\u4e2a\u5185\u90e8\u91cf\u5316\u7684\u6807\u51c6</li> </ul> <p>\u8bfe\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u7f51\u9875\u4ea4\u4e92\u7684 Demo\uff0c\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u7ebf\u6027\u5206\u7c7b\u5668\uff1aInteractive web demo</p>"},{"location":"course/cs/cs231n/lec03_regularization_and_optimization/","title":"\u6b63\u5219\u5316\u548c\u4f18\u5316","text":"<p> \u7ea6 566 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"course/cs/cs231n/lec03_regularization_and_optimization/#_2","title":"\u6b63\u5219\u5316","text":"<p>\u4e3a\u4ec0\u4e48\u8981\u6b63\u5219\u5316</p> <ul> <li>\u9632\u6b62\u6a21\u578b\u592a\u590d\u6742\uff0c\u5728\u8bad\u7ec3\u96c6\u4e0a\u8868\u73b0\u5f97\u592a\u597d</li> <li>\u907f\u514d\u62df\u5408\u566a\u58f0\uff0c\u5229\u4e8e\u8bad\u7ec3\u6743\u91cd</li> <li>\u6dfb\u52a0\u975e\u7ebf\u6027\u6b63\u5219\u9879\uff0c\u63d0\u9ad8\u6a21\u578b\u6cdb\u5316\u6027\u80fd</li> </ul> <p></p> <ul> <li>\\(\\lambda\\) \u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0c\u4ee3\u8868\u6b63\u5219\u5f3a\u5ea6(regularization strength) <p>\u4e00\u822c\u4f7f\u7528 L2 \u6b63\u5219\u65f6\u6211\u4eec\u7528 \\(\\lambda\\) \u8868\u793a\uff0c\u800c\u4f7f\u7528 L1 \u6b63\u5219\u65f6\u6211\u4eec\u7528 \\(\\alpha\\) \u8868\u793a</p> </li> <li>\u6b63\u5219\u51fd\u6570<ul> <li>L2 \u6b63\u5219\uff1a\\(R(W)=\\sum_k \\sum_l W_{k, l}^2\\)<ul> <li>L2 \u6b63\u5219\u53ef\u4ee5\u4f7f\u5f97\u53c2\u6570\u5e73\u6ed1\uff0c\u9632\u6b62\u6a21\u578b\u8fc7\u62df\u5408</li> </ul> </li> <li>L1 \u6b63\u5219\uff1a\\(R(W)=\\sum_k \\sum_l | W_{k, l} |\\)<ul> <li>L1 \u6b63\u5219\u53ef\u4ee5\u4f7f\u5f97\u53c2\u6570\u7a00\u758f\u5316</li> <li>L1 \u6b63\u5219\u5bf9\u4e8e\u6837\u672c\u7684\u5750\u6807\u7cfb\u6709\u4f9d\u8d56</li> </ul> </li> </ul> </li> <li>\u5176\u4ed6\u66f4\u590d\u6742\u7684\u9632\u6b62\u8fc7\u62df\u5408\u65b9\u6cd5<ul> <li>Dropout</li> <li>Batch Normalization(BN)</li> <li>Fractional Pooling</li> </ul> </li> </ul>"},{"location":"course/cs/cs231n/lec03_regularization_and_optimization/#_3","title":"\u4f18\u5316","text":""},{"location":"course/cs/cs231n/lec03_regularization_and_optimization/#sgd","title":"\u968f\u673a\u68af\u5ea6\u4e0b\u964d(SGD)","text":"<p>\u5728\u591a\u5143\u51fd\u6570\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u53d8\u91cf\u7684\u68af\u5ea6\u662f\u591a\u5143\u51fd\u6570\u5bf9\u8be5\u53d8\u91cf\u7684\u504f\u5bfc\u6570\u7ec4\u6210\u7684\u5411\u91cf</p> <p>\u4ee5\u4e00\u5143\u4e3a\u4f8b\uff1a</p> \\[ \\frac{d f(x)}{d x}=\\lim _{h \\rightarrow 0} \\frac{f(x+h)-f(x)}{h} \\] <p>Example</p> <p>\u5047\u8bbe\u73b0\u5728\u7684\u6743\u91cd\uff1a\\(W = [0.34, -1.11, 0.78, 0.12, ...]\\)</p> <p>\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u635f\u5931\u503c \\(l_1 = 1.25347\\)</p> <p>\u53d6 \\(h = 0.0001\\)\uff0c\u5219\u66f4\u65b0\u540e\u7684\u6743\u91cd\uff1a</p> \\[W' = W + h = [0.34 + \\boldsymbol{0.0001}, -1.11 + \\boldsymbol{0.0001}...]\\] <p>\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u635f\u5931\u503c \\(l_2 = 1.25322\\)</p> <p>\u6839\u636e\u516c\u5f0f \\((l_2 - l_1)/h\\)\uff0c\u8ba1\u7b97 \\(W\\) \u7684\u68af\u5ea6\uff1a\\(dW = [-2.5, 0.6, ...]\\)</p> <p>\u8fd9\u79cd\u8ba1\u7b97\u53c2\u6570\u68af\u5ea6\u7684\u65b9\u6cd5\u5f88\u4f4e\u6548\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u53ef\u4ee5\u8ba1\u7b97\u68af\u5ea6\u7684\u89e3\u6790\u89e3</p> \\[ \\begin{aligned} &amp; L=\\frac{1}{N} \\sum_{i=1}^N L_i+\\sum_k W_k^2 \\\\ &amp; L_i=\\sum_{j \\neq y_i} \\max \\left(0, s_j-s_{y_i}+1\\right) \\\\ &amp; s=f(x ; W)=W x \\\\ \\\\ &amp; \\text{calculate} \\quad \\nabla_W L \\end{aligned} \\] <p>\u68af\u5ea6\u68c0\u67e5\uff1a\u8ba1\u7b97\u51fa\u68af\u5ea6\u7684\u89e3\u6790\u89e3\u4e4b\u540e\uff0c\u4ee3\u5165\u6570\u503c\u8fdb\u884c\u68c0\u9a8c</p> <p>\u5f53\u53c2\u6570\u7684\u89c4\u6a21\u5f88\u5927\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u90fd\u8ba1\u7b97\u6240\u6709\u53c2\u6570\u7684\u68af\u5ea6\u5f00\u9500\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u6279\u91cf\u5316\uff0c\u6bcf\u6b21\u8ba1\u7b97\u68af\u5ea6\u7684\u65f6\u5019\u53ea\u9009\u53d6\u4e00\u4e2a minibatch \u8fdb\u884c\u8ba1\u7b97</p> \\[ \\begin{aligned} \\nabla_W L(W)=\\frac{1}{K} \\sum_{i \\in \\sum_K} \\nabla_W L_i\\left(x_i, y_i, W\\right)+\\lambda \\nabla_W R(W) \\end{aligned} \\] <p>Question</p> <p>\u5173\u4e8e SGD \u5b58\u5728\u7684\u4e00\u4e9b\u95ee\u9898</p> <ul> <li>Q1: \u5982\u679c\u635f\u5931\u503c\u5728\u4e00\u4e2a\u68af\u5ea6\u65b9\u5411\u53d8\u5316\u5f97\u5f88\u5feb\u800c\u5728\u53e6\u4e00\u4e2a\u65b9\u5411\u53d8\u5316\u5f97\u5f88\u7f13\u6162\u4f1a\u600e\u4e48\u6837</li> <li>A1: </li> </ul>"},{"location":"course/cs/dlsys/","title":"10-414/714: Deep Learning Systems","text":"<p>Abstract</p> <ul> <li> Website: Latest version</li> <li> Video: (2022 Fall)</li> <li> Github: Zicx's repo(2022 Fall)</li> </ul>"},{"location":"course/cs/dlsys/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/cs/ds/","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5","text":"<p>TODO</p>"},{"location":"course/cs/ds/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/cs/icv/","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u5bfc\u8bba","text":"<p>TODO</p>"},{"location":"course/cs/icv/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/cs/na/","title":"\u6570\u503c\u5206\u6790","text":"<p>TODO</p>"},{"location":"course/cs/na/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/cs/oop/","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","text":"<p>TODO</p>"},{"location":"course/cs/oop/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/cs/os/","title":"\u64cd\u4f5c\u7cfb\u7edf","text":"<p>TODO</p>"},{"location":"course/cs/os/#table-of-contents","title":"Table of Contents","text":""},{"location":"course/math/","title":"Mathematics","text":"<p>Abstract</p> <p>\u6570\u5b66\u76f8\u5173\u8bfe\u7a0b\u7684\u7b14\u8bb0\u90fd\u653e\u5728\u8fd9\u91cc\uff0c\u597d\u50cf\u5b66\u4e86\u5341\u591a\u5e74\u6570\u5b66\u4e86</p> <p></p> <p> Wir m\u00fcssen wissen, wir werden wissen. </p> <p> \u2014\u2014 David Hilbert </p> <p></p>"},{"location":"course/opt/","title":"Optics","text":"<p>Abstract</p> <p>\u5149\u7535\u76f8\u5173\u8bfe\u7a0b\u7684\u7b14\u8bb0\u90fd\u653e\u5728\u8fd9\u91cc\uff0c\u611f\u89c9\u8fd9\u4e2a\u4e13\u4e1a\u5b66\u7684\u6709\u70b9\u6742</p> <p><p> </p></p> \\[\\large \\begin{aligned} &amp; \\nabla \\cdot \\mathbf{E}=\\frac{\\rho}{\\varepsilon_0} \\\\ &amp; \\nabla \\cdot \\mathbf{B}=0 \\\\ &amp; \\nabla \\times \\mathbf{E}=-\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ &amp; \\nabla \\times \\mathbf{B}=\\mu_0 \\mathbf{J}+\\mu_0 \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t}\\end{aligned} \\] <p> \u2014\u2014 James Clerk Maxwell </p> <p>\u516c\u5f0f\u6e32\u67d3\u6709\u8bef\u7684\u8bdd\u53ef\u4ee5\u5237\u65b0\u8bd5\u8bd5 :)</p>"},{"location":"course/opt/optoelec/","title":"\u5149\u7535\u5b50\u5b66","text":"<p>TODO</p>"},{"location":"course/opt/optoelec/#table-of-contents","title":"Table of Contents","text":""},{"location":"life/","title":"\u751f\u6d3b","text":"<p>\u5206\u4eab\u4e00\u4e9b\u6709\u610f\u601d\u7684\u4e1c\u897f</p> <p>TODO</p>"},{"location":"life/film/","title":"\u5f71\u89c6","text":"<p>TODO</p>"},{"location":"life/reading/","title":"\u9605\u8bfb","text":"<p>TODO</p>"},{"location":"memo/","title":"\u5907\u5fd8\u5f55","text":"<p>Info</p> <p>\u8fd9\u91cc\u662f\u5907\u5fd8\u5f55\uff0c\u5305\u62ec\u4ee5\u4e0b\u5185\u5bb9:</p> <ul> <li>\u5e38\u7528\u5de5\u5177: Shell/Git/Cmake/...</li> <li>\u7f16\u7a0b\u8bed\u8a00: C++/Python/Go/...</li> <li>\u73af\u5883\u642d\u5efa: Mac/Windows/Linux/...</li> </ul> Overview \u5b9e\u7528\u5de5\u5177  Git  Shell  CMake  Markdown  Docker  LaTeX  MATLAB  NumPy  Neovim  Conda  Tmux  FFmpeg  Pytorch \u7f16\u7a0b\u8bed\u8a00  C++  Python  Go  Rust  Julia  Lua \u73af\u5883\u642d\u5efa  Windows  Mac  Linux <p>Icon Source: mkdocs-material-icons</p>"},{"location":"memo/config/","title":"\u73af\u5883\u642d\u5efa","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u73af\u5883\u914d\u7f6e\u76f8\u5173\u7684\u5185\u5bb9</p> <p></p> <p> \u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\u3002 </p> <p> \u2014\u2014 \u300a\u8bba\u8bed\u00b7\u536b\u7075\u516c\u300b </p> <p></p>"},{"location":"memo/pl/","title":"\u7f16\u7a0b\u8bed\u8a00","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u76f8\u5173\u7684\u5185\u5bb9</p> <p></p> <p> \u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\u3002 </p> <p> \u2014\u2014 \u300a\u8bba\u8bed\u00b7\u536b\u7075\u516c\u300b </p> <p></p>"},{"location":"memo/pl/python/","title":"Python","text":""},{"location":"memo/pl/python/#table-of-contents","title":"Table of Contents","text":"<ul> <li>cs231n Python Numpy Tutorial</li> </ul>"},{"location":"memo/tool/","title":"\u5e38\u7528\u5de5\u5177","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u5e38\u7528\u5de5\u5177\u76f8\u5173\u7684\u5185\u5bb9</p> <p></p> <p> \u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\u3002 </p> <p> \u2014\u2014 \u300a\u8bba\u8bed\u00b7\u536b\u7075\u516c\u300b </p> <p></p>"},{"location":"memo/tool/conda/","title":"Conda","text":"<p> \u7ea6 323 \u4e2a\u5b57  50 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Abstract</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b Conda \u76f8\u5173\u7684\u5185\u5bb9</p>"},{"location":"memo/tool/conda/#_1","title":"\u5b89\u88c5","text":"<p>\u5b89\u88c5\u4ee5 Miniconda \u4e3a\u4f8b\uff0cAnaconda \u7684\u5b89\u88c5\u6b65\u9aa4\u5dee\u4e0d\u591a\uff0c\u4f46\u662f Miniconda \u8981\u66f4\u7cbe\u7b80\u4e00\u4e9b</p>"},{"location":"memo/tool/conda/#linux","title":"Linux","text":"<pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh # \u4e0b\u8f7d\u5b89\u88c5\u811a\u672c\nchmod +x Miniconda3-latest-Linux-x86_64.sh # \u6dfb\u52a0\u53ef\u6267\u884c\u6743\u9650\n./Miniconda3-latest-Linux-x86_64.sh # \u5b89\u88c5\n</code></pre> <p>\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u9700\u8981\u5728<code>~/.zshrc</code>\u6216<code>~/.bashrc</code>\u4e2d\u5199\u5165 Conda \u7684\u73af\u5883\u53d8\u91cf</p> <p>\u5047\u8bbe miniconda \u8def\u5f84\u4e3a<code>~/miniconda3/</code>\uff0c\u8bb0\u4e3a<code>conda_path</code></p> <pre><code>__conda_setup=\"$('conda_path/bin/conda' 'shell.zsh' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\neval \"$__conda_setup\"\nelse\nif [ -f \"conda_path/etc/profile.d/conda.sh\" ]; then\n. \"conda_path/etc/profile.d/conda.sh\"\nelse\nexport PATH=\"conda_path/bin:$PATH\"\nfi\nfi\nunset __conda_setup\n</code></pre> <p>\u8fd9\u91cc\u7528<code>conda_path</code>\u662f\u4e3a\u4e86\u8868\u793a\u65b9\u4fbf\uff0c\u8bf7\u5c06<code>conda_path</code>\u66ff\u6362\u4e3a\u5b89\u88c5 miniconda \u7684\u8def\u5f84</p> <p>\u5199\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u7528<code>source ~/.zshrc</code>\u6216<code>source ~/.bashrc</code>\u547d\u4ee4\u6765\u4f7f\u73af\u5883\u53d8\u91cf\u751f\u6548\uff0c</p> <p>\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165<code>conda info</code>\u5982\u679c\u6709\u4fe1\u606f\u8f93\u51fa\u5219\u8bf4\u660e\u5df2\u7ecf\u914d\u7f6e\u5b8c\u6210</p>"},{"location":"memo/tool/conda/#mac","title":"Mac","text":"<p>Mac \u5b89\u88c5 miniconda \u548c Linux \u7684\u5b89\u88c5\u6b65\u9aa4\u7c7b\u4f3c\uff0c\u901a\u8fc7 shell \u811a\u672c\u5b89\u88c5\u7684\u65b9\u5f0f\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002\u53e6\u5916\u4e00\u79cd\u5b89\u88c5\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7 Homebrew \u5b89\u88c5</p> <pre><code>brew install --cask miniconda\n</code></pre> <p>\u5b89\u88c5\u540e\u540c\u6837\u9700\u8981\u6309\u7167 Linux \u4e2d\u7684\u6b65\u9aa4\u6765\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u4e4b\u540e\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u6765\u521d\u59cb\u5316 Conda</p> <pre><code>conda init \"$(basename \"${SHELL}\")\"\n</code></pre>"},{"location":"memo/tool/conda/#_2","title":"\u5e38\u7528\u547d\u4ee4","text":"<pre><code>conda --version or conda -V # \u67e5\u770b conda \u7684\u7248\u672c\nconda update conda # \u66f4\u65b0 conda\nconda info # \u67e5\u770b\u5f53\u524d\u73af\u5883\u4e0b\u7684 conda \u4fe1\u606f\nconda create -n env_name [python=3.x] # \u521b\u5efa\u73af\u5883\uff0c\u53ef\u4ee5\u6307\u5b9a Python \u7248\u672c\nconda activate env_name # \u6fc0\u6d3b env_name \u73af\u5883\nconda deactivate # \u9000\u51fa\u5f53\u524d\u73af\u5883\nconda remove -n env_name --all # \u5220\u9664 env_name \u73af\u5883\nconda env list # \u5217\u51fa\u6240\u6709\u7684\u73af\u5883\nconda install package_name # \u5728\u5f53\u524d\u73af\u5883\u4e2d\u5b89\u88c5\u5305\nconda list # \u5217\u51fa\u5f53\u524d\u73af\u5883\u4e2d\u7684\u6240\u6709 Python \u5305\nconda search [-c channel_address] [-f] [packages] # \u641c\u7d22\u6307\u5b9a\u7684\u5305\nconda clean -a # \u6e05\u9664\u7f13\u5b58\u548c\u6ca1\u6709\u4f9d\u8d56\u7684\u5305\n</code></pre>"},{"location":"memo/tool/conda/#_3","title":"\u5e38\u7528\u914d\u7f6e","text":"<p>Windows \u7cfb\u7edf\u7684 Conda \u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e<code>C:\\Users\\username\\.condarc</code>\uff0cLinux \u6216\u8005 Mac \u7cfb\u7edf Conda \u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e<code>~/.condarc</code>\u6216<code>~/.conda/.condarc</code>\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>conda config --set ...</code>\u6307\u4ee4\u6765\u6dfb\u52a0\u6216\u66f4\u6539\u5bf9\u5e94\u7684\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539\u4e0b\u8f7d\u6e90\u4ece\u800c\u52a0\u5feb\u4e0b\u8f7d\u7684\u901f\u5ea6</p> <p>\u6211\u7684\u5e38\u7528\u8bbe\u7f6e(\u7528\u7684\u662f\u963f\u91cc\u6e90)\uff1a</p> <pre><code>report_errors: true\nauto_activate_base: false\nssl_verify: true\nshow_channel_urls: true\nchannels:\n  - http://mirrors.aliyun.com/anaconda/pkgs/main\n  - http://mirrors.aliyun.com/anaconda/pkgs/r\n  - http://mirrors.aliyun.com/anaconda/pkgs/msys2\n</code></pre>"},{"location":"memo/tool/ffmpeg/","title":"FFmpeg","text":""},{"location":"memo/tool/matlab/","title":"MATLAB","text":"<p> \u7ea6 315 \u4e2a\u5b57  60 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p> <p>Abstract</p> <p>\u4e0a\u4fe1\u53f7\u8bfe\u7684\u65f6\u5019\u6b63\u597d\u9700\u8981\u7528\u5230 MATLAB\uff0c\u987a\u624b\u5728\u8fd9\u91cc\u8bb0\u4e00\u4e9b\u4e1c\u897f \u57fa\u672c\u90fd\u662f\u6839\u636e\u5b98\u65b9\u6587\u6863\u548c\u8001\u5e08\u63d0\u4f9b\u7684\u4e00\u4e9b\u8d44\u6599\u6765\u5199\u7684</p> <p>\u5b98\u65b9\u6587\u6863\u5728\u8fd9\u91cc\uff1a</p> <ul> <li>English</li> <li>Cninese</li> </ul>"},{"location":"memo/tool/matlab/#_1","title":"\u57fa\u7840\u8bed\u6cd5","text":"<p>MATLAB \u7528 <code>%</code> \u6765\u8868\u793a\u6ce8\u91ca</p>"},{"location":"memo/tool/matlab/#_2","title":"\u6570\u636e\u5bf9\u8c61","text":""},{"location":"memo/tool/matlab/#_3","title":"\u6d41\u7a0b\u63a7\u5236","text":""},{"location":"memo/tool/matlab/#if","title":"if \u8bed\u53e5","text":"<pre><code>if expression1\nstatements1\nelseif expression2\nstatements2\nelse\nstatements3\nend\n</code></pre>"},{"location":"memo/tool/matlab/#while","title":"while \u8bed\u53e5","text":"<pre><code>while expression\nstatements\nend\n</code></pre>"},{"location":"memo/tool/matlab/#for","title":"for \u8bed\u53e5","text":"<pre><code>for index = initval:step:endval\nstatements\nend\n</code></pre>"},{"location":"memo/tool/matlab/#_4","title":"\u7ed8\u56fe","text":""},{"location":"memo/tool/matlab/#plot","title":"plot \u51fd\u6570","text":"<p><code>plot</code> \u51fd\u6570\u662f\u7ed8\u5236\u4e8c\u7ef4\u66f2\u7ebf\u7684\u51fd\u6570</p> <pre><code>x = linspace(0,4*pi,300);\ny = sin(x);\nplot(x,y);\n</code></pre> <p></p> <p>\u5982\u679c\u8981\u5728\u540c\u4e00\u56fe\u4e2d\u753b\u51fa\u591a\u6761\u66f2\u7ebf\uff0c\u53ea\u9700\u5c06\u5750\u6807\u4f9d\u6b21\u653e\u5165 <code>plot</code> \u51fd\u6570\u5373\u53ef\uff0c\u5e76\u4e14\u53ef\u4ee5\u6539\u53d8\u6bcf\u6761\u66f2\u7ebf\u7684\u989c\u8272\u3001\u7ebf\u578b\u7b49</p> <pre><code>plot(x,sin(x),'c',x,cos(x),'r:');\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u7ed9\u56fe\u7247\u52a0\u4e0a\u6807\u6ce8\u3001\u56fe\u6ce8\u3001\u6807\u9898</p> <pre><code>xlabel('x'); ylabel('y');\nlegend('sin(x)','cos(x)');\ntitle('Sine and Cosine Functions');\n</code></pre> <p>title\u3001legend\u3001label \u90fd\u662f\u652f\u6301 \\(LaTeX\\) \u8bed\u6cd5\u7684</p> <pre><code>title('$y_1=\\sin(4\\pi t+\\pi /3)$','interpreter','latex')\n</code></pre> <p>\u8fd8\u53ef\u8bbe\u5b9a\u5408\u9002\u7684\u5750\u6807\u8f74\u8303\u56f4</p> <pre><code>axis([0 4*pi -1.2 1.2]);\n</code></pre> <p></p> <p>\u5982\u679c\u8981\u5728\u4e00\u4e2a\u7ed8\u56fe\u7a97\u53e3\u4e2d\u7ed8\u5236\u591a\u4e2a\u56fe\u5f62\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>subplot(m,n,p)</code> \u547d\u4ee4\uff0c\u5176 \u4e2d\u53c2\u6570 m \u548c n \u7ed9\u5b9a\u5728\u4e00\u4e2a\u7a97\u53e3\u4e2d\u663e\u793a m \u884c n \u5217\u4e2a\u56fe\u5f62\uff0cp \u8868\u793a\u9009\u5b9a\u7b2c p \u4e2a\u56fe\u5f62\u533a\u57df\uff0c\u5373\u5728\u7b2c p \u4e2a\u533a\u57df\u4f5c\u56fe</p> <pre><code>t = linspace(0,10,5001);\nA1 = 1.; w1 = 2*pi*2; p1=pi/3;\nA2 = 1.2; w2 = 2*pi*2.2; p2=-2*pi/3;\nsnr = 10; %Signal-to-noise ratio in dB.\ny1 = A1*sin(w1*t+p1);\ny2 = A2*sin(w2*t+p2);\ny = y1+y2;\nyn = awgn(y,snr,'measured'); % Add white Gaussian noise.\nsubplot(2,2,1); plot(t,y1); axis([0,2,-1.5,1.5]);\ntitle('$y_1=\\sin(4\\pi t+\\pi /3)$','interpreter','latex')\nsubplot(2,2,2); plot(t,y2,'red'); axis([0,2,-1.5,1.5]);\ntitle('$y_2=\\sin(4.4\\pi t-2\\pi /3)$','interpreter','latex')\nsubplot(2,2,3); plot(t,y);\ntitle('$y=y_1+y_2$','interpreter','latex');\nsubplot(2,2,4); plot(t,yn);\ntitle('Noisy Signal');\n</code></pre> <p></p>"},{"location":"memo/tool/matlab/#stem","title":"stem \u51fd\u6570","text":"<p><code>stem</code> \u51fd\u6570\u53ef\u4ee5\u753b\u51fa\u6746\u72b6\u56fe\u6765\u663e\u793a\u79bb\u6563\u65f6\u95f4\u4fe1\u53f7</p> <p><code>clear</code> \u51fd\u6570\u53ef\u4ee5\u6e05\u9664\u5f53\u524d\u5de5\u4f5c\u533a\u6240\u6709\u53d8\u91cf\uff0c<code>clf</code> \u51fd\u6570\u53ef\u4ee5\u6e05\u7a7a\u5f53\u524d\u56fe\u7a97</p> <pre><code>clear;\nk1 = -3; k2 = 6; k = k1:k2;\naxisscaling=[k1,k2,-.1,1.1];\nn = 0;\nx = +(k==n); %impulse series\nx1 = +(k&gt;=n); %step series\nsubplot(1,2,1);\nstem(k,x,'filled');\ntitle('Discrete Impulse Function')\naxis(axisscaling); xlabel('$n$','interpreter','latex');\nylabel('$\\delta[n]$','interpreter','latex');\nsubplot(1,2,2);\nstem(k,x1,'filled');\ntitle('Discrete Step Function')\naxis(axisscaling); xlabel('$n$','interpreter','latex');\nylabel('$u\\left[n\\right]$','interpreter','latex');\n</code></pre>"},{"location":"memo/tool/pytorch/","title":"Pytorch","text":"<p> \u7ea6 779 \u4e2a\u5b57  36 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p> <p>Abstract</p> <p>\u6700\u8fd1\u5728\u590d\u73b0\u8bba\u6587\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b Pytorch \u76f8\u5173\u7684\u5185\u5bb9\u4ee5\u53ca\u4e00\u4e9b\u6709\u7528\u7684 tricks</p> <ul> <li>\u5b98\u65b9\u6559\u7a0b\uff1aPytorch Tutorial</li> <li>\u5b98\u65b9\u6587\u6863\uff1aPytorch documentation</li> <li>Cheet Sheet: Pytorch Cheet Sheet</li> </ul>"},{"location":"memo/tool/pytorch/#_1","title":"\u5b89\u88c5","text":"<p>\u63a8\u8350\u4f7f\u7528 Anaconda/Miniconda \u521b\u5efa\u865a\u62df\u73af\u5883\u5b89\u88c5 Pytorch</p> <p>\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528 CPU \u7248\u672c\u7684 Pytorch\uff0c\u90a3\u4e48\u4ee5\u4e0b\u7684\u590d\u6742\u6b65\u9aa4\u90fd\u4e0d\u9700\u8981\u505a\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u4e24\u6761\u6307\u4ee4\u4e2d\u7684\u4e00\u6761\u5373\u53ef\u5b89\u88c5</p> <pre><code>pip3 install torch torchvision torchaudio               # pip\nconda install pytorch torchvision torchaudio cpuonly    # conda\n</code></pre> <p>\u6b63\u786e\u7684\u5b89\u88c5\u6d41\u7a0b\u5982\u4e0b:</p> <ul> <li>\u5728\u7ec8\u7aef\u8f93\u5165<code>nvidia-smi</code>\u67e5\u770b NVIDIA \u9a71\u52a8\u7684\u7248\u672c\u548c\u652f\u6301\u7684 CUDA \u7684\u6700\u9ad8\u7248\u672c</li> </ul> <p> </p> <ul> <li>\u5728\u7ec8\u7aef\u8f93\u5165<code>nvcc -V</code>\u67e5\u770b\u672c\u673a\u5b89\u88c5\u7684 CUDA \u7248\u672c\uff0c\u5982\u679c\u63d0\u793a\u8be5\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u53bb NVIDIA \u5b98\u7f51 \u4e0b\u8f7d CUDA</li> </ul> <pre><code>$ nvcc -V\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2021 NVIDIA Corporation\nBuilt on Fri_Dec_17_18:28:54:_Pacific_Standard_Time_2021\nCuda compilation tools, release 11.2, V11.2.152\nBuild cuda_11.2.r11.2/compiler.30794723_0\n</code></pre> <ul> <li>\u5b89\u88c5\u5bf9\u5e94 CUDA \u7248\u672c\u7684 cudnn\uff0c\u5b98\u65b9\u4e0b\u8f7d\u5730\u5740\u4e3a cudnn download</li> <li>\u4e0b\u8f7d Anaconda/Miniconda\uff0c\u521b\u5efa\u4e00\u4e2a\u73af\u5883\uff08e.g. pytorch)\uff0cConda \u7684\u914d\u7f6e\u548c\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 Conda \u5907\u5fd8\u5f55</li> <li>\u5728 Pytoch \u5b98\u65b9 \u627e\u5230\u5bf9\u5e94\u5e73\u53f0\u548c CUDA \u7248\u672c\u7684\u5b89\u88c5\u6307\u4ee4(e.g. cuda11.1)</li> </ul> <pre><code>conda install pytorch torchvision torchaudio pytorch-cuda=11.2 -c pytorch -c nvidia\n</code></pre> <ul> <li>\u5b89\u88c5\u5b8c Pytorch \u540e\u6211\u4eec\u9700\u8981\u68c0\u9a8c\u5b89\u88c5\u662f\u5426\u6210\u529f\uff0c\u4e14\u7248\u672c\u662f\u5426\u6b63\u786e</li> </ul> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; torch.__version__\n'1.12.1'\n&gt;&gt;&gt; torch.cuda.is_available()\nTrue\n&gt;&gt;&gt; torch.cuda.get_device_name()\n'NVIDIA GeForce GTX 1660 Ti'\n&gt;&gt;&gt; from torch.backends import cudnn\n&gt;&gt;&gt; cudnn.is_available()\nTrue\n</code></pre> <p>\u5982\u679c\u6267\u884c\u4e0a\u8ff0\u6307\u4ee4\u770b\u5230\u7684\u7ed3\u679c\u4e00\u81f4\uff0c\u90a3\u4e48 Pytorch \u7684\u5b89\u88c5\u5df2\u7ecf\u6210\u529f\u4e86</p> <p>\u6700\u540e\u53ef\u4ee5\u5b89\u88c5\u4e00\u4e9b\u6df1\u5ea6\u5b66\u4e60\u5e38\u7528\u7684 Python \u5305</p> <pre><code>pyyaml\ntqdm\nplyfile\ntensorboardX\njupyter\npandas\nmatplotlib\nnumpy\nscipy\n</code></pre>"},{"location":"memo/tool/pytorch/#_2","title":"\u57fa\u672c\u8bed\u6cd5","text":""},{"location":"memo/tool/pytorch/#_3","title":"\u5e38\u7528\u6a21\u5757","text":""},{"location":"memo/tool/pytorch/#tensorboard","title":"TensorBoard","text":"<p>\u73b0\u5728\u63a8\u8350\u4f7f\u7528\u7684\u662f lanpa \u5927\u4f6c\u5f00\u53d1\u7684tensorboardX\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u652f\u6301 PyTorch \u7684 tensorboard \u5de5\u5177\u5305\uff0c\u4ece\u800c\u8ba9 PyTorch \u5f88\u597d\u5730\u8c03\u7528 tensorboard \u7684\u6570\u636e\u53ef\u89c6\u5316\u5de5\u5177\u6765\u76d1\u63a7\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u7684\u8fc7\u7a0b\u3002</p> <p>\u5b98\u65b9\u6587\u6863\uff1atensorboardX\u2019s documentation</p> <p>\u5b98\u65b9\u4ed3\u5e93\uff1aGithub repo</p>"},{"location":"memo/tool/pytorch/#_4","title":"\u5b89\u88c5","text":"<pre><code>pip install tensorboardX\n</code></pre>"},{"location":"memo/tool/pytorch/#_5","title":"\u4f7f\u7528","text":"<p>\u6211\u4eec\u9700\u8981\u7528\u5230 tensorboardX \u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u53eb\u505a<code>SummaryWriter</code></p>"},{"location":"memo/tool/pytorch/#_6","title":"\u521d\u59cb\u5316","text":"<pre><code>from tensorboardX import SummaryWriter\n# \u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\nwriter1 = SummaryWriter()\nwriter2 = SummaryWriter(\"./logs\")\n</code></pre>"},{"location":"memo/tool/pytorch/#_7","title":"\u8bb0\u5f55\u6570\u636e","text":"<pre><code>writer.add_scalar(tag, scalar_value, global_step=None, walltime=None)\n</code></pre> <ul> <li>tag: \u6570\u636e\u6807\u7b7e\uff0c\u4e0d\u540c\u6807\u7b7e\u7684\u6570\u636e\u4f7f\u7528\u4e0d\u540c\u66f2\u7ebf\u7ed8\u5236</li> <li>scalar_value: \u5e38\u91cf\u503c</li> <li>global_step: \u8bad\u7ec3\u7684 step</li> <li>walltime: \u8bb0\u5f55\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a time.time()</li> </ul> <p>\u9700\u8981\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 scalar_value \u5fc5\u987b\u4e3a float \u7c7b\u578b\uff0c\u5982\u679c\u662f scalar tensor\uff0c\u5219\u9700\u8981\u8c03\u7528<code>tensor.item()</code>\u65b9\u6cd5\u83b7\u53d6\u5176\u6570\u503c</p> <p>\u6211\u4eec\u4e00\u822c\u4f1a\u4f7f\u7528<code>add_scalar</code>\u65b9\u6cd5\u6765\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u7684 loss\u3001accuracy\u3001learning rate \u7b49\u6570\u503c\u7684\u53d8\u5316\uff0c\u76f4\u89c2\u5730\u76d1\u63a7\u8bad\u7ec3\u8fc7\u7a0b</p> <pre><code>writer.add_scalar('Train/Loss', loss.data[0], niter)\nwriter.add_scalar('Test/Accu', correct/total, niter)\n</code></pre>"},{"location":"memo/tool/pytorch/#_8","title":"\u8fd0\u884c\u56fe","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>add_graph</code>\u65b9\u6cd5\u6765\u6dfb\u52a0\u4e00\u4e2a\u8fd0\u884c\u56fe\uff0c\u53ef\u89c6\u5316\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc</p> <pre><code>writer.add_graph(model, input_to_model=None, verbose=False, **kwargs)\n</code></pre> <ul> <li>model: \u5f85\u53ef\u89c6\u5316\u7684\u7f51\u7edc\u6a21\u578b</li> <li>input_to_model: \u5f85\u8f93\u5165\u795e\u7ecf\u7f51\u7edc\u7684\u53d8\u91cf</li> </ul>"},{"location":"memo/tool/pytorch/#_9","title":"\u6dfb\u52a0\u56fe\u7247","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>add_image</code>\u65b9\u6cd5\u6765\u53ef\u89c6\u5316\u4e00\u5f20\u56fe\u7247</p> <pre><code>writer.add_image(tag, img_tensor, global_step=None, walltime=None, dataformats='CHW')\n</code></pre> <ul> <li>tag: \u6570\u636e\u6807\u7b7e</li> <li>img_tensor: \u56fe\u50cf\u6570\u636e\uff0c\u662f\u591a\u7ef4 tensor</li> <li>global_step: \u8bad\u7ec3\u7684 step</li> <li>walltime: \u8bb0\u5f55\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a time.time()</li> </ul>"},{"location":"memo/tool/pytorch/#_10","title":"\u5d4c\u5165\u5411\u91cf","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>add_embedding</code>\u65b9\u6cd5\u5728\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7a7a\u95f4\u53ef\u89c6\u5316 embedding \u5411\u91cf</p> <pre><code>writer.add_embedding(mat, metadata=None, label_img=None, global_step=None, tag='default', metadata_header=None)\n</code></pre> <ul> <li>mat: \u4e8c\u7ef4\u77e9\u9635\uff0c\u6bcf\u884c\u4ee3\u8868\u7279\u5f81\u7a7a\u95f4\u7684\u4e00\u4e2a\u6570\u636e\u70b9</li> <li>metadata: \u4e00\u7ef4\u5217\u8868\uff0c\u8868\u793a mat \u4e2d\u6bcf\u884c\u6570\u636e\u7684 label\uff0c\u5927\u5c0f\u5e94\u548c mat \u884c\u6570\u76f8\u540c</li> <li>label_img: \u5f62\u5982 NxCxHxW \u7684\u56db\u7ef4 tensor\uff0c\u5bf9\u5e94 mat \u4e2d\u6bcf\u4e00\u884c\u6570\u636e\u663e\u793a\u51fa\u7684\u56fe\u50cf\uff0cN \u5e94\u548c mat \u884c\u6570\u76f8\u540c</li> <li>global_step: \u8bad\u7ec3\u7684 step</li> <li>tag: \u6570\u636e\u6807\u7b7e</li> </ul>"},{"location":"memo/tool/pytorch/#_11","title":"\u5bfc\u51fa","text":"<pre><code># export scalar data to JSON for external processing\nwriter.export_scalars_to_json(\"./all_scalars.json\")\nwriter.close()\n</code></pre>"},{"location":"memo/tool/pytorch/#_12","title":"\u767b\u9646","text":"<p>\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u6253\u5f00 tensorboard</p> <pre><code># --port \u53ef\u4ee5\u6307\u5b9a\u6253\u5f00\u7684\u7aef\u53e3\ntensorboard --logdir=logs --port=6007\n</code></pre>"},{"location":"others/","title":"\u6742\u9879\u8bb0\u5f55","text":"<p>\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\u4f1a\u653e\u5230\u8fd9\u91cc</p> <p>TODO</p>"}]}